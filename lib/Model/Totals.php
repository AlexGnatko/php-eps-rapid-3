<?php
/**
 * Totals
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Totals Class Doc Comment
 *
 * @category Class
 * @description The total price of charges, given various critera. * &#x60;inclusive&#x60; - provides the total price including taxes and fees. This does not include hotel collected fees such as resort, mandatory taxes, and mandatory fees. * &#x60;exclusive&#x60; - provides the total price excluding taxes and fees. * &#x60;inclusive_strikethrough&#x60; - provides the tax &#x60;inclusive&#x60; total price with any hotel funded discounts added back. Can be used to merchandise the savings due to a discount. * &#x60;strikethrough&#x60; - provides the tax &#x60;exclusive&#x60; total price with any hotel funded discounts added back. Can be used to merchandise the savings due to a discount. * &#x60;marketing_fee&#x60; - provides the potential owed earnings per transaction. * &#x60;gross_profit&#x60; - provides the estimated gross profit per transaction. * &#x60;minimum_selling_price&#x60; - provides the minimum selling price. * &#x60;property_fees&#x60; - provides the total of the fees collected by the property.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Totals implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Totals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inclusive' => '\OpenAPI\Client\Model\Charge',
        'exclusive' => '\OpenAPI\Client\Model\Charge',
        'inclusive_strikethrough' => '\OpenAPI\Client\Model\Charge',
        'strikethrough' => '\OpenAPI\Client\Model\Charge',
        'marketing_fee' => '\OpenAPI\Client\Model\Charge',
        'gross_profit' => '\OpenAPI\Client\Model\Charge',
        'minimum_selling_price' => '\OpenAPI\Client\Model\Charge',
        'property_fees' => '\OpenAPI\Client\Model\Charge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inclusive' => null,
        'exclusive' => null,
        'inclusive_strikethrough' => null,
        'strikethrough' => null,
        'marketing_fee' => null,
        'gross_profit' => null,
        'minimum_selling_price' => null,
        'property_fees' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inclusive' => false,
		'exclusive' => false,
		'inclusive_strikethrough' => false,
		'strikethrough' => false,
		'marketing_fee' => false,
		'gross_profit' => false,
		'minimum_selling_price' => false,
		'property_fees' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inclusive' => 'inclusive',
        'exclusive' => 'exclusive',
        'inclusive_strikethrough' => 'inclusive_strikethrough',
        'strikethrough' => 'strikethrough',
        'marketing_fee' => 'marketing_fee',
        'gross_profit' => 'gross_profit',
        'minimum_selling_price' => 'minimum_selling_price',
        'property_fees' => 'property_fees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inclusive' => 'setInclusive',
        'exclusive' => 'setExclusive',
        'inclusive_strikethrough' => 'setInclusiveStrikethrough',
        'strikethrough' => 'setStrikethrough',
        'marketing_fee' => 'setMarketingFee',
        'gross_profit' => 'setGrossProfit',
        'minimum_selling_price' => 'setMinimumSellingPrice',
        'property_fees' => 'setPropertyFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inclusive' => 'getInclusive',
        'exclusive' => 'getExclusive',
        'inclusive_strikethrough' => 'getInclusiveStrikethrough',
        'strikethrough' => 'getStrikethrough',
        'marketing_fee' => 'getMarketingFee',
        'gross_profit' => 'getGrossProfit',
        'minimum_selling_price' => 'getMinimumSellingPrice',
        'property_fees' => 'getPropertyFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inclusive', $data ?? [], null);
        $this->setIfExists('exclusive', $data ?? [], null);
        $this->setIfExists('inclusive_strikethrough', $data ?? [], null);
        $this->setIfExists('strikethrough', $data ?? [], null);
        $this->setIfExists('marketing_fee', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('minimum_selling_price', $data ?? [], null);
        $this->setIfExists('property_fees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inclusive
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getInclusive()
    {
        return $this->container['inclusive'];
    }

    /**
     * Sets inclusive
     *
     * @param \OpenAPI\Client\Model\Charge|null $inclusive inclusive
     *
     * @return self
     */
    public function setInclusive($inclusive)
    {
        if (is_null($inclusive)) {
            throw new \InvalidArgumentException('non-nullable inclusive cannot be null');
        }
        $this->container['inclusive'] = $inclusive;

        return $this;
    }

    /**
     * Gets exclusive
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getExclusive()
    {
        return $this->container['exclusive'];
    }

    /**
     * Sets exclusive
     *
     * @param \OpenAPI\Client\Model\Charge|null $exclusive exclusive
     *
     * @return self
     */
    public function setExclusive($exclusive)
    {
        if (is_null($exclusive)) {
            throw new \InvalidArgumentException('non-nullable exclusive cannot be null');
        }
        $this->container['exclusive'] = $exclusive;

        return $this;
    }

    /**
     * Gets inclusive_strikethrough
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getInclusiveStrikethrough()
    {
        return $this->container['inclusive_strikethrough'];
    }

    /**
     * Sets inclusive_strikethrough
     *
     * @param \OpenAPI\Client\Model\Charge|null $inclusive_strikethrough inclusive_strikethrough
     *
     * @return self
     */
    public function setInclusiveStrikethrough($inclusive_strikethrough)
    {
        if (is_null($inclusive_strikethrough)) {
            throw new \InvalidArgumentException('non-nullable inclusive_strikethrough cannot be null');
        }
        $this->container['inclusive_strikethrough'] = $inclusive_strikethrough;

        return $this;
    }

    /**
     * Gets strikethrough
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getStrikethrough()
    {
        return $this->container['strikethrough'];
    }

    /**
     * Sets strikethrough
     *
     * @param \OpenAPI\Client\Model\Charge|null $strikethrough strikethrough
     *
     * @return self
     */
    public function setStrikethrough($strikethrough)
    {
        if (is_null($strikethrough)) {
            throw new \InvalidArgumentException('non-nullable strikethrough cannot be null');
        }
        $this->container['strikethrough'] = $strikethrough;

        return $this;
    }

    /**
     * Gets marketing_fee
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getMarketingFee()
    {
        return $this->container['marketing_fee'];
    }

    /**
     * Sets marketing_fee
     *
     * @param \OpenAPI\Client\Model\Charge|null $marketing_fee marketing_fee
     *
     * @return self
     */
    public function setMarketingFee($marketing_fee)
    {
        if (is_null($marketing_fee)) {
            throw new \InvalidArgumentException('non-nullable marketing_fee cannot be null');
        }
        $this->container['marketing_fee'] = $marketing_fee;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param \OpenAPI\Client\Model\Charge|null $gross_profit gross_profit
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            throw new \InvalidArgumentException('non-nullable gross_profit cannot be null');
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets minimum_selling_price
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getMinimumSellingPrice()
    {
        return $this->container['minimum_selling_price'];
    }

    /**
     * Sets minimum_selling_price
     *
     * @param \OpenAPI\Client\Model\Charge|null $minimum_selling_price minimum_selling_price
     *
     * @return self
     */
    public function setMinimumSellingPrice($minimum_selling_price)
    {
        if (is_null($minimum_selling_price)) {
            throw new \InvalidArgumentException('non-nullable minimum_selling_price cannot be null');
        }
        $this->container['minimum_selling_price'] = $minimum_selling_price;

        return $this;
    }

    /**
     * Gets property_fees
     *
     * @return \OpenAPI\Client\Model\Charge|null
     */
    public function getPropertyFees()
    {
        return $this->container['property_fees'];
    }

    /**
     * Sets property_fees
     *
     * @param \OpenAPI\Client\Model\Charge|null $property_fees property_fees
     *
     * @return self
     */
    public function setPropertyFees($property_fees)
    {
        if (is_null($property_fees)) {
            throw new \InvalidArgumentException('non-nullable property_fees cannot be null');
        }
        $this->container['property_fees'] = $property_fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



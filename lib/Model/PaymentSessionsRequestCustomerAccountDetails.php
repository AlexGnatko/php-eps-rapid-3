<?php
/**
 * PaymentSessionsRequestCustomerAccountDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentSessionsRequestCustomerAccountDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSessionsRequestCustomerAccountDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSessionsRequestCustomerAccountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication_method' => 'string',
        'authentication_timestamp' => 'string',
        'create_date' => 'string',
        'change_date' => 'string',
        'password_change_date' => 'string',
        'add_card_attempts' => 'float',
        'account_purchases' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authentication_method' => null,
        'authentication_timestamp' => null,
        'create_date' => null,
        'change_date' => null,
        'password_change_date' => null,
        'add_card_attempts' => null,
        'account_purchases' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authentication_method' => false,
		'authentication_timestamp' => false,
		'create_date' => false,
		'change_date' => false,
		'password_change_date' => false,
		'add_card_attempts' => false,
		'account_purchases' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_method' => 'authentication_method',
        'authentication_timestamp' => 'authentication_timestamp',
        'create_date' => 'create_date',
        'change_date' => 'change_date',
        'password_change_date' => 'password_change_date',
        'add_card_attempts' => 'add_card_attempts',
        'account_purchases' => 'account_purchases'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_method' => 'setAuthenticationMethod',
        'authentication_timestamp' => 'setAuthenticationTimestamp',
        'create_date' => 'setCreateDate',
        'change_date' => 'setChangeDate',
        'password_change_date' => 'setPasswordChangeDate',
        'add_card_attempts' => 'setAddCardAttempts',
        'account_purchases' => 'setAccountPurchases'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_method' => 'getAuthenticationMethod',
        'authentication_timestamp' => 'getAuthenticationTimestamp',
        'create_date' => 'getCreateDate',
        'change_date' => 'getChangeDate',
        'password_change_date' => 'getPasswordChangeDate',
        'add_card_attempts' => 'getAddCardAttempts',
        'account_purchases' => 'getAccountPurchases'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTHENTICATION_METHOD_GUEST = 'guest';
    public const AUTHENTICATION_METHOD_OWN_CREDENTIALS = 'own_credentials';
    public const AUTHENTICATION_METHOD_FEDERATED_ID = 'federated_id';
    public const AUTHENTICATION_METHOD_ISSUER_CREDENTIALS = 'issuer_credentials';
    public const AUTHENTICATION_METHOD_THIRD_PARTY_AUTHENTICATION = 'third_party_authentication';
    public const AUTHENTICATION_METHOD_FIDO_AUTHENTICATION = 'fido_authentication';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationMethodAllowableValues()
    {
        return [
            self::AUTHENTICATION_METHOD_GUEST,
            self::AUTHENTICATION_METHOD_OWN_CREDENTIALS,
            self::AUTHENTICATION_METHOD_FEDERATED_ID,
            self::AUTHENTICATION_METHOD_ISSUER_CREDENTIALS,
            self::AUTHENTICATION_METHOD_THIRD_PARTY_AUTHENTICATION,
            self::AUTHENTICATION_METHOD_FIDO_AUTHENTICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authentication_method', $data ?? [], null);
        $this->setIfExists('authentication_timestamp', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('change_date', $data ?? [], null);
        $this->setIfExists('password_change_date', $data ?? [], null);
        $this->setIfExists('add_card_attempts', $data ?? [], null);
        $this->setIfExists('account_purchases', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationMethodAllowableValues();
        if (!is_null($this->container['authentication_method']) && !in_array($this->container['authentication_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication_method', must be one of '%s'",
                $this->container['authentication_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_method
     *
     * @return string|null
     */
    public function getAuthenticationMethod()
    {
        return $this->container['authentication_method'];
    }

    /**
     * Sets authentication_method
     *
     * @param string|null $authentication_method Mechanism used by the cardholder to authenticate to the merchant.
     *
     * @return self
     */
    public function setAuthenticationMethod($authentication_method)
    {
        if (is_null($authentication_method)) {
            throw new \InvalidArgumentException('non-nullable authentication_method cannot be null');
        }
        $allowedValues = $this->getAuthenticationMethodAllowableValues();
        if (!in_array($authentication_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication_method', must be one of '%s'",
                    $authentication_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_method'] = $authentication_method;

        return $this;
    }

    /**
     * Gets authentication_timestamp
     *
     * @return string|null
     */
    public function getAuthenticationTimestamp()
    {
        return $this->container['authentication_timestamp'];
    }

    /**
     * Sets authentication_timestamp
     *
     * @param string|null $authentication_timestamp Date and time in UTC of the cardholder authentication, in extended ISO 8601 format.
     *
     * @return self
     */
    public function setAuthenticationTimestamp($authentication_timestamp)
    {
        if (is_null($authentication_timestamp)) {
            throw new \InvalidArgumentException('non-nullable authentication_timestamp cannot be null');
        }
        $this->container['authentication_timestamp'] = $authentication_timestamp;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return string|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param string|null $create_date Date the cardholder opened the account with the merchant, in ISO 8601 format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets change_date
     *
     * @return string|null
     */
    public function getChangeDate()
    {
        return $this->container['change_date'];
    }

    /**
     * Sets change_date
     *
     * @param string|null $change_date Date the cardholder’s account with the merchant was last changed, including Billing or Shipping address, new payment account, or new user(s) added, in ISO 8601 format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setChangeDate($change_date)
    {
        if (is_null($change_date)) {
            throw new \InvalidArgumentException('non-nullable change_date cannot be null');
        }
        $this->container['change_date'] = $change_date;

        return $this;
    }

    /**
     * Gets password_change_date
     *
     * @return string|null
     */
    public function getPasswordChangeDate()
    {
        return $this->container['password_change_date'];
    }

    /**
     * Sets password_change_date
     *
     * @param string|null $password_change_date Date the cardholder’s account with the merchant had a password change or account reset, in ISO 8601 format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setPasswordChangeDate($password_change_date)
    {
        if (is_null($password_change_date)) {
            throw new \InvalidArgumentException('non-nullable password_change_date cannot be null');
        }
        $this->container['password_change_date'] = $password_change_date;

        return $this;
    }

    /**
     * Gets add_card_attempts
     *
     * @return float|null
     */
    public function getAddCardAttempts()
    {
        return $this->container['add_card_attempts'];
    }

    /**
     * Sets add_card_attempts
     *
     * @param float|null $add_card_attempts Number of add card attempts in the last 24 hours.
     *
     * @return self
     */
    public function setAddCardAttempts($add_card_attempts)
    {
        if (is_null($add_card_attempts)) {
            throw new \InvalidArgumentException('non-nullable add_card_attempts cannot be null');
        }
        $this->container['add_card_attempts'] = $add_card_attempts;

        return $this;
    }

    /**
     * Gets account_purchases
     *
     * @return float|null
     */
    public function getAccountPurchases()
    {
        return $this->container['account_purchases'];
    }

    /**
     * Sets account_purchases
     *
     * @param float|null $account_purchases Number of purchases with this cardholder's account during the previous six months.
     *
     * @return self
     */
    public function setAccountPurchases($account_purchases)
    {
        if (is_null($account_purchases)) {
            throw new \InvalidArgumentException('non-nullable account_purchases cannot be null');
        }
        $this->container['account_purchases'] = $account_purchases;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * CreateItineraryRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateItineraryRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateItineraryRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateItineraryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affiliate_reference_id' => 'string',
        'hold' => 'bool',
        'email' => 'string',
        'phone' => '\OpenAPI\Client\Model\PhoneRequest',
        'rooms' => '\OpenAPI\Client\Model\CreateItineraryRequestRoom[]',
        'payments' => '\OpenAPI\Client\Model\PaymentRequest[]',
        'affiliate_metadata' => 'string',
        'tax_registration_number' => 'string',
        'traveler_handling_instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affiliate_reference_id' => null,
        'hold' => null,
        'email' => null,
        'phone' => null,
        'rooms' => null,
        'payments' => null,
        'affiliate_metadata' => null,
        'tax_registration_number' => null,
        'traveler_handling_instructions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'affiliate_reference_id' => false,
		'hold' => false,
		'email' => false,
		'phone' => false,
		'rooms' => false,
		'payments' => false,
		'affiliate_metadata' => false,
		'tax_registration_number' => false,
		'traveler_handling_instructions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliate_reference_id' => 'affiliate_reference_id',
        'hold' => 'hold',
        'email' => 'email',
        'phone' => 'phone',
        'rooms' => 'rooms',
        'payments' => 'payments',
        'affiliate_metadata' => 'affiliate_metadata',
        'tax_registration_number' => 'tax_registration_number',
        'traveler_handling_instructions' => 'traveler_handling_instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliate_reference_id' => 'setAffiliateReferenceId',
        'hold' => 'setHold',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'rooms' => 'setRooms',
        'payments' => 'setPayments',
        'affiliate_metadata' => 'setAffiliateMetadata',
        'tax_registration_number' => 'setTaxRegistrationNumber',
        'traveler_handling_instructions' => 'setTravelerHandlingInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliate_reference_id' => 'getAffiliateReferenceId',
        'hold' => 'getHold',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'rooms' => 'getRooms',
        'payments' => 'getPayments',
        'affiliate_metadata' => 'getAffiliateMetadata',
        'tax_registration_number' => 'getTaxRegistrationNumber',
        'traveler_handling_instructions' => 'getTravelerHandlingInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('affiliate_reference_id', $data ?? [], null);
        $this->setIfExists('hold', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('affiliate_metadata', $data ?? [], null);
        $this->setIfExists('tax_registration_number', $data ?? [], null);
        $this->setIfExists('traveler_handling_instructions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['rooms'] === null) {
            $invalidProperties[] = "'rooms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliate_reference_id
     *
     * @return string|null
     */
    public function getAffiliateReferenceId()
    {
        return $this->container['affiliate_reference_id'];
    }

    /**
     * Sets affiliate_reference_id
     *
     * @param string|null $affiliate_reference_id Your unique reference value. This field supports from 3 to a maximum of 28 characters and is required to be unique (if provided). Entering special characters (\"<\", \">\", \"(\", \")\", and \"&\") in this field will result in the request being rejected.
     *
     * @return self
     */
    public function setAffiliateReferenceId($affiliate_reference_id)
    {
        if (is_null($affiliate_reference_id)) {
            throw new \InvalidArgumentException('non-nullable affiliate_reference_id cannot be null');
        }
        $this->container['affiliate_reference_id'] = $affiliate_reference_id;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool|null
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool|null $hold Flag for placing a booking on hold. The booking will be released if the resume link is not followed within the hold period. Please refer to our Hold and Resume documentation.
     *
     * @return self
     */
    public function setHold($hold)
    {
        if (is_null($hold)) {
            throw new \InvalidArgumentException('non-nullable hold cannot be null');
        }
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address for the customer. Must adhere to standard RFC 822 email format. Special characters (\"<\", \">\", \"(\", \")\", and \"&\") entered in this field will be re-encoded.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Model\PhoneRequest
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Model\PhoneRequest $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return \OpenAPI\Client\Model\CreateItineraryRequestRoom[]
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param \OpenAPI\Client\Model\CreateItineraryRequestRoom[] $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \OpenAPI\Client\Model\PaymentRequest[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \OpenAPI\Client\Model\PaymentRequest[]|null $payments Required if payment information prior to booking was not submitted. If register payments was called prior to this call, do not submit payment information again.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets affiliate_metadata
     *
     * @return string|null
     */
    public function getAffiliateMetadata()
    {
        return $this->container['affiliate_metadata'];
    }

    /**
     * Sets affiliate_metadata
     *
     * @param string|null $affiliate_metadata Field that stores up to 256 characters of additional metadata with the itinerary. Will be returned on all retrieve responses for this itinerary. The data must be in the format 'key1:value|key2:value|key3:value'. Other Special characters (\"<\", \">\", \"(\", \")\", and \"&\") entered in this field will be re-encoded.
     *
     * @return self
     */
    public function setAffiliateMetadata($affiliate_metadata)
    {
        if (is_null($affiliate_metadata)) {
            throw new \InvalidArgumentException('non-nullable affiliate_metadata cannot be null');
        }
        $this->container['affiliate_metadata'] = $affiliate_metadata;

        return $this;
    }

    /**
     * Gets tax_registration_number
     *
     * @return string|null
     */
    public function getTaxRegistrationNumber()
    {
        return $this->container['tax_registration_number'];
    }

    /**
     * Sets tax_registration_number
     *
     * @param string|null $tax_registration_number The customer's taxpayer identification number that is provided by the government to nationals or resident aliens. This number should be collected from individuals that pay taxes or participate in activities that provide revenue for one or more tax types. Note: This value is only needed from Brazilian and Indian customers.
     *
     * @return self
     */
    public function setTaxRegistrationNumber($tax_registration_number)
    {
        if (is_null($tax_registration_number)) {
            throw new \InvalidArgumentException('non-nullable tax_registration_number cannot be null');
        }
        $this->container['tax_registration_number'] = $tax_registration_number;

        return $this;
    }

    /**
     * Gets traveler_handling_instructions
     *
     * @return string|null
     */
    public function getTravelerHandlingInstructions()
    {
        return $this->container['traveler_handling_instructions'];
    }

    /**
     * Sets traveler_handling_instructions
     *
     * @param string|null $traveler_handling_instructions Custom traveler handling instructions for the hotel. Do not include PCI sensitive data, such as credit card numbers, in this field.
     *
     * @return self
     */
    public function setTravelerHandlingInstructions($traveler_handling_instructions)
    {
        if (is_null($traveler_handling_instructions)) {
            throw new \InvalidArgumentException('non-nullable traveler_handling_instructions cannot be null');
        }
        $this->container['traveler_handling_instructions'] = $traveler_handling_instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Itinerary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Itinerary Class Doc Comment
 *
 * @category Class
 * @description The itinerary object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Itinerary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Itinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'itinerary_id' => 'string',
        'property_id' => 'string',
        'links' => '\OpenAPI\Client\Model\ItineraryLinks',
        'email' => 'string',
        'phone' => '\OpenAPI\Client\Model\Phone',
        'rooms' => '\OpenAPI\Client\Model\RoomItinerary[]',
        'billing_contact' => '\OpenAPI\Client\Model\BillingContact',
        'adjustment' => '\OpenAPI\Client\Model\Adjustment',
        'creation_date_time' => 'string',
        'affiliate_reference_id' => 'string',
        'affiliate_metadata' => 'string',
        'conversations' => '\OpenAPI\Client\Model\Conversations',
        'trader_information' => '\OpenAPI\Client\Model\TraderInformation',
        'essential_information' => '\OpenAPI\Client\Model\EssentialInformation',
        'travel_purpose' => 'string',
        'itinerary_history' => '\OpenAPI\Client\Model\ItineraryHistoryItem[]',
        'room_history' => '\OpenAPI\Client\Model\RoomHistoryItem[][]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'itinerary_id' => null,
        'property_id' => null,
        'links' => null,
        'email' => null,
        'phone' => null,
        'rooms' => null,
        'billing_contact' => null,
        'adjustment' => null,
        'creation_date_time' => null,
        'affiliate_reference_id' => null,
        'affiliate_metadata' => null,
        'conversations' => null,
        'trader_information' => null,
        'essential_information' => null,
        'travel_purpose' => null,
        'itinerary_history' => null,
        'room_history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'itinerary_id' => false,
		'property_id' => false,
		'links' => false,
		'email' => false,
		'phone' => false,
		'rooms' => false,
		'billing_contact' => false,
		'adjustment' => false,
		'creation_date_time' => false,
		'affiliate_reference_id' => false,
		'affiliate_metadata' => false,
		'conversations' => false,
		'trader_information' => false,
		'essential_information' => false,
		'travel_purpose' => false,
		'itinerary_history' => false,
		'room_history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itinerary_id' => 'itinerary_id',
        'property_id' => 'property_id',
        'links' => 'links',
        'email' => 'email',
        'phone' => 'phone',
        'rooms' => 'rooms',
        'billing_contact' => 'billing_contact',
        'adjustment' => 'adjustment',
        'creation_date_time' => 'creation_date_time',
        'affiliate_reference_id' => 'affiliate_reference_id',
        'affiliate_metadata' => 'affiliate_metadata',
        'conversations' => 'conversations',
        'trader_information' => 'trader_information',
        'essential_information' => 'essential_information',
        'travel_purpose' => 'travel_purpose',
        'itinerary_history' => 'itinerary_history',
        'room_history' => 'room_history'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itinerary_id' => 'setItineraryId',
        'property_id' => 'setPropertyId',
        'links' => 'setLinks',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'rooms' => 'setRooms',
        'billing_contact' => 'setBillingContact',
        'adjustment' => 'setAdjustment',
        'creation_date_time' => 'setCreationDateTime',
        'affiliate_reference_id' => 'setAffiliateReferenceId',
        'affiliate_metadata' => 'setAffiliateMetadata',
        'conversations' => 'setConversations',
        'trader_information' => 'setTraderInformation',
        'essential_information' => 'setEssentialInformation',
        'travel_purpose' => 'setTravelPurpose',
        'itinerary_history' => 'setItineraryHistory',
        'room_history' => 'setRoomHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itinerary_id' => 'getItineraryId',
        'property_id' => 'getPropertyId',
        'links' => 'getLinks',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'rooms' => 'getRooms',
        'billing_contact' => 'getBillingContact',
        'adjustment' => 'getAdjustment',
        'creation_date_time' => 'getCreationDateTime',
        'affiliate_reference_id' => 'getAffiliateReferenceId',
        'affiliate_metadata' => 'getAffiliateMetadata',
        'conversations' => 'getConversations',
        'trader_information' => 'getTraderInformation',
        'essential_information' => 'getEssentialInformation',
        'travel_purpose' => 'getTravelPurpose',
        'itinerary_history' => 'getItineraryHistory',
        'room_history' => 'getRoomHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRAVEL_PURPOSE_LEISURE = 'leisure';
    public const TRAVEL_PURPOSE_BUSINESS = 'business';
    public const TRAVEL_PURPOSE_UNSPECIFIED = 'unspecified';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTravelPurposeAllowableValues()
    {
        return [
            self::TRAVEL_PURPOSE_LEISURE,
            self::TRAVEL_PURPOSE_BUSINESS,
            self::TRAVEL_PURPOSE_UNSPECIFIED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('itinerary_id', $data ?? [], null);
        $this->setIfExists('property_id', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('billing_contact', $data ?? [], null);
        $this->setIfExists('adjustment', $data ?? [], null);
        $this->setIfExists('creation_date_time', $data ?? [], null);
        $this->setIfExists('affiliate_reference_id', $data ?? [], null);
        $this->setIfExists('affiliate_metadata', $data ?? [], null);
        $this->setIfExists('conversations', $data ?? [], null);
        $this->setIfExists('trader_information', $data ?? [], null);
        $this->setIfExists('essential_information', $data ?? [], null);
        $this->setIfExists('travel_purpose', $data ?? [], null);
        $this->setIfExists('itinerary_history', $data ?? [], null);
        $this->setIfExists('room_history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTravelPurposeAllowableValues();
        if (!is_null($this->container['travel_purpose']) && !in_array($this->container['travel_purpose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'travel_purpose', must be one of '%s'",
                $this->container['travel_purpose'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itinerary_id
     *
     * @return string|null
     */
    public function getItineraryId()
    {
        return $this->container['itinerary_id'];
    }

    /**
     * Sets itinerary_id
     *
     * @param string|null $itinerary_id The itinerary id.
     *
     * @return self
     */
    public function setItineraryId($itinerary_id)
    {
        if (is_null($itinerary_id)) {
            throw new \InvalidArgumentException('non-nullable itinerary_id cannot be null');
        }
        $this->container['itinerary_id'] = $itinerary_id;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return string|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param string|null $property_id The property id.
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {
        if (is_null($property_id)) {
            throw new \InvalidArgumentException('non-nullable property_id cannot be null');
        }
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\ItineraryLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\ItineraryLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address for the customer.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Model\Phone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Model\Phone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return \OpenAPI\Client\Model\RoomItinerary[]|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param \OpenAPI\Client\Model\RoomItinerary[]|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets billing_contact
     *
     * @return \OpenAPI\Client\Model\BillingContact|null
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     *
     * @param \OpenAPI\Client\Model\BillingContact|null $billing_contact billing_contact
     *
     * @return self
     */
    public function setBillingContact($billing_contact)
    {
        if (is_null($billing_contact)) {
            throw new \InvalidArgumentException('non-nullable billing_contact cannot be null');
        }
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets adjustment
     *
     * @return \OpenAPI\Client\Model\Adjustment|null
     */
    public function getAdjustment()
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param \OpenAPI\Client\Model\Adjustment|null $adjustment adjustment
     *
     * @return self
     */
    public function setAdjustment($adjustment)
    {
        if (is_null($adjustment)) {
            throw new \InvalidArgumentException('non-nullable adjustment cannot be null');
        }
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return string|null
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param string|null $creation_date_time The creation date/time of the booking.
     *
     * @return self
     */
    public function setCreationDateTime($creation_date_time)
    {
        if (is_null($creation_date_time)) {
            throw new \InvalidArgumentException('non-nullable creation_date_time cannot be null');
        }
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets affiliate_reference_id
     *
     * @return string|null
     */
    public function getAffiliateReferenceId()
    {
        return $this->container['affiliate_reference_id'];
    }

    /**
     * Sets affiliate_reference_id
     *
     * @param string|null $affiliate_reference_id Your unique reference value. This field supports from 3 to a maximum of 28 characters.
     *
     * @return self
     */
    public function setAffiliateReferenceId($affiliate_reference_id)
    {
        if (is_null($affiliate_reference_id)) {
            throw new \InvalidArgumentException('non-nullable affiliate_reference_id cannot be null');
        }
        $this->container['affiliate_reference_id'] = $affiliate_reference_id;

        return $this;
    }

    /**
     * Gets affiliate_metadata
     *
     * @return string|null
     */
    public function getAffiliateMetadata()
    {
        return $this->container['affiliate_metadata'];
    }

    /**
     * Sets affiliate_metadata
     *
     * @param string|null $affiliate_metadata Field that stores up to 256 characters of additional metadata with the itinerary, uniqueness is not required.
     *
     * @return self
     */
    public function setAffiliateMetadata($affiliate_metadata)
    {
        if (is_null($affiliate_metadata)) {
            throw new \InvalidArgumentException('non-nullable affiliate_metadata cannot be null');
        }
        $this->container['affiliate_metadata'] = $affiliate_metadata;

        return $this;
    }

    /**
     * Gets conversations
     *
     * @return \OpenAPI\Client\Model\Conversations|null
     */
    public function getConversations()
    {
        return $this->container['conversations'];
    }

    /**
     * Sets conversations
     *
     * @param \OpenAPI\Client\Model\Conversations|null $conversations conversations
     *
     * @return self
     */
    public function setConversations($conversations)
    {
        if (is_null($conversations)) {
            throw new \InvalidArgumentException('non-nullable conversations cannot be null');
        }
        $this->container['conversations'] = $conversations;

        return $this;
    }

    /**
     * Gets trader_information
     *
     * @return \OpenAPI\Client\Model\TraderInformation|null
     */
    public function getTraderInformation()
    {
        return $this->container['trader_information'];
    }

    /**
     * Sets trader_information
     *
     * @param \OpenAPI\Client\Model\TraderInformation|null $trader_information trader_information
     *
     * @return self
     */
    public function setTraderInformation($trader_information)
    {
        if (is_null($trader_information)) {
            throw new \InvalidArgumentException('non-nullable trader_information cannot be null');
        }
        $this->container['trader_information'] = $trader_information;

        return $this;
    }

    /**
     * Gets essential_information
     *
     * @return \OpenAPI\Client\Model\EssentialInformation|null
     */
    public function getEssentialInformation()
    {
        return $this->container['essential_information'];
    }

    /**
     * Sets essential_information
     *
     * @param \OpenAPI\Client\Model\EssentialInformation|null $essential_information essential_information
     *
     * @return self
     */
    public function setEssentialInformation($essential_information)
    {
        if (is_null($essential_information)) {
            throw new \InvalidArgumentException('non-nullable essential_information cannot be null');
        }
        $this->container['essential_information'] = $essential_information;

        return $this;
    }

    /**
     * Gets travel_purpose
     *
     * @return string|null
     */
    public function getTravelPurpose()
    {
        return $this->container['travel_purpose'];
    }

    /**
     * Sets travel_purpose
     *
     * @param string|null $travel_purpose Value potentially passed in during the availability request to indicate the purpose of the trip designated by the traveler.
     *
     * @return self
     */
    public function setTravelPurpose($travel_purpose)
    {
        if (is_null($travel_purpose)) {
            throw new \InvalidArgumentException('non-nullable travel_purpose cannot be null');
        }
        $allowedValues = $this->getTravelPurposeAllowableValues();
        if (!in_array($travel_purpose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'travel_purpose', must be one of '%s'",
                    $travel_purpose,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['travel_purpose'] = $travel_purpose;

        return $this;
    }

    /**
     * Gets itinerary_history
     *
     * @return \OpenAPI\Client\Model\ItineraryHistoryItem[]|null
     */
    public function getItineraryHistory()
    {
        return $this->container['itinerary_history'];
    }

    /**
     * Sets itinerary_history
     *
     * @param \OpenAPI\Client\Model\ItineraryHistoryItem[]|null $itinerary_history itinerary_history
     *
     * @return self
     */
    public function setItineraryHistory($itinerary_history)
    {
        if (is_null($itinerary_history)) {
            throw new \InvalidArgumentException('non-nullable itinerary_history cannot be null');
        }
        $this->container['itinerary_history'] = $itinerary_history;

        return $this;
    }

    /**
     * Gets room_history
     *
     * @return \OpenAPI\Client\Model\RoomHistoryItem[][]|null
     */
    public function getRoomHistory()
    {
        return $this->container['room_history'];
    }

    /**
     * Sets room_history
     *
     * @param \OpenAPI\Client\Model\RoomHistoryItem[][]|null $room_history An array of rooms each containing an array of room history events.
     *
     * @return self
     */
    public function setRoomHistory($room_history)
    {
        if (is_null($room_history)) {
            throw new \InvalidArgumentException('non-nullable room_history cannot be null');
        }
        $this->container['room_history'] = $room_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * RateItinerary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RateItinerary Class Doc Comment
 *
 * @category Class
 * @description The rate information associated with the itinerary.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateItinerary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateItinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_of_record' => '\OpenAPI\Client\Model\MerchantOfRecord',
        'refundable' => 'bool',
        'cancel_refund' => '\OpenAPI\Client\Model\CancelRefund',
        'amenities' => 'string[]',
        'promotions' => '\OpenAPI\Client\Model\PromotionsItinerary',
        'cancel_penalties' => '\OpenAPI\Client\Model\CancelPenalty[]',
        'nonrefundable_date_ranges' => '\OpenAPI\Client\Model\NonrefundableDateRange[]',
        'deposits' => '\OpenAPI\Client\Model\DepositItinerary[]',
        'card_on_file_limit' => '\OpenAPI\Client\Model\Amount',
        'refundable_damage_deposit' => '\OpenAPI\Client\Model\Amount',
        'pricing' => '\OpenAPI\Client\Model\PricingInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'merchant_of_record' => null,
        'refundable' => null,
        'cancel_refund' => null,
        'amenities' => null,
        'promotions' => null,
        'cancel_penalties' => null,
        'nonrefundable_date_ranges' => null,
        'deposits' => null,
        'card_on_file_limit' => null,
        'refundable_damage_deposit' => null,
        'pricing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'merchant_of_record' => false,
		'refundable' => false,
		'cancel_refund' => false,
		'amenities' => false,
		'promotions' => false,
		'cancel_penalties' => false,
		'nonrefundable_date_ranges' => false,
		'deposits' => false,
		'card_on_file_limit' => false,
		'refundable_damage_deposit' => false,
		'pricing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_of_record' => 'merchant_of_record',
        'refundable' => 'refundable',
        'cancel_refund' => 'cancel_refund',
        'amenities' => 'amenities',
        'promotions' => 'promotions',
        'cancel_penalties' => 'cancel_penalties',
        'nonrefundable_date_ranges' => 'nonrefundable_date_ranges',
        'deposits' => 'deposits',
        'card_on_file_limit' => 'card_on_file_limit',
        'refundable_damage_deposit' => 'refundable_damage_deposit',
        'pricing' => 'pricing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_of_record' => 'setMerchantOfRecord',
        'refundable' => 'setRefundable',
        'cancel_refund' => 'setCancelRefund',
        'amenities' => 'setAmenities',
        'promotions' => 'setPromotions',
        'cancel_penalties' => 'setCancelPenalties',
        'nonrefundable_date_ranges' => 'setNonrefundableDateRanges',
        'deposits' => 'setDeposits',
        'card_on_file_limit' => 'setCardOnFileLimit',
        'refundable_damage_deposit' => 'setRefundableDamageDeposit',
        'pricing' => 'setPricing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_of_record' => 'getMerchantOfRecord',
        'refundable' => 'getRefundable',
        'cancel_refund' => 'getCancelRefund',
        'amenities' => 'getAmenities',
        'promotions' => 'getPromotions',
        'cancel_penalties' => 'getCancelPenalties',
        'nonrefundable_date_ranges' => 'getNonrefundableDateRanges',
        'deposits' => 'getDeposits',
        'card_on_file_limit' => 'getCardOnFileLimit',
        'refundable_damage_deposit' => 'getRefundableDamageDeposit',
        'pricing' => 'getPricing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_of_record', $data ?? [], null);
        $this->setIfExists('refundable', $data ?? [], null);
        $this->setIfExists('cancel_refund', $data ?? [], null);
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('cancel_penalties', $data ?? [], null);
        $this->setIfExists('nonrefundable_date_ranges', $data ?? [], null);
        $this->setIfExists('deposits', $data ?? [], null);
        $this->setIfExists('card_on_file_limit', $data ?? [], null);
        $this->setIfExists('refundable_damage_deposit', $data ?? [], null);
        $this->setIfExists('pricing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The id of the rate.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_of_record
     *
     * @return \OpenAPI\Client\Model\MerchantOfRecord|null
     */
    public function getMerchantOfRecord()
    {
        return $this->container['merchant_of_record'];
    }

    /**
     * Sets merchant_of_record
     *
     * @param \OpenAPI\Client\Model\MerchantOfRecord|null $merchant_of_record merchant_of_record
     *
     * @return self
     */
    public function setMerchantOfRecord($merchant_of_record)
    {
        if (is_null($merchant_of_record)) {
            throw new \InvalidArgumentException('non-nullable merchant_of_record cannot be null');
        }
        $this->container['merchant_of_record'] = $merchant_of_record;

        return $this;
    }

    /**
     * Gets refundable
     *
     * @return bool|null
     */
    public function getRefundable()
    {
        return $this->container['refundable'];
    }

    /**
     * Sets refundable
     *
     * @param bool|null $refundable Indicates whether the itinerary is refundable or not.
     *
     * @return self
     */
    public function setRefundable($refundable)
    {
        if (is_null($refundable)) {
            throw new \InvalidArgumentException('non-nullable refundable cannot be null');
        }
        $this->container['refundable'] = $refundable;

        return $this;
    }

    /**
     * Gets cancel_refund
     *
     * @return \OpenAPI\Client\Model\CancelRefund|null
     */
    public function getCancelRefund()
    {
        return $this->container['cancel_refund'];
    }

    /**
     * Sets cancel_refund
     *
     * @param \OpenAPI\Client\Model\CancelRefund|null $cancel_refund cancel_refund
     *
     * @return self
     */
    public function setCancelRefund($cancel_refund)
    {
        if (is_null($cancel_refund)) {
            throw new \InvalidArgumentException('non-nullable cancel_refund cannot be null');
        }
        $this->container['cancel_refund'] = $cancel_refund;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return string[]|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param string[]|null $amenities amenities
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \OpenAPI\Client\Model\PromotionsItinerary|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \OpenAPI\Client\Model\PromotionsItinerary|null $promotions promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets cancel_penalties
     *
     * @return \OpenAPI\Client\Model\CancelPenalty[]|null
     */
    public function getCancelPenalties()
    {
        return $this->container['cancel_penalties'];
    }

    /**
     * Sets cancel_penalties
     *
     * @param \OpenAPI\Client\Model\CancelPenalty[]|null $cancel_penalties The cancel penalties associated with the itinerary.
     *
     * @return self
     */
    public function setCancelPenalties($cancel_penalties)
    {
        if (is_null($cancel_penalties)) {
            throw new \InvalidArgumentException('non-nullable cancel_penalties cannot be null');
        }
        $this->container['cancel_penalties'] = $cancel_penalties;

        return $this;
    }

    /**
     * Gets nonrefundable_date_ranges
     *
     * @return \OpenAPI\Client\Model\NonrefundableDateRange[]|null
     */
    public function getNonrefundableDateRanges()
    {
        return $this->container['nonrefundable_date_ranges'];
    }

    /**
     * Sets nonrefundable_date_ranges
     *
     * @param \OpenAPI\Client\Model\NonrefundableDateRange[]|null $nonrefundable_date_ranges A list of date exceptions. Dates within these ranges provide no refund on cancellation, regardless of cancel penalty windows. Nonrefundable range begins at 00:00:00 on the start date, and ends at 23:59:59 on the end date, in the local time zone of the property.
     *
     * @return self
     */
    public function setNonrefundableDateRanges($nonrefundable_date_ranges)
    {
        if (is_null($nonrefundable_date_ranges)) {
            throw new \InvalidArgumentException('non-nullable nonrefundable_date_ranges cannot be null');
        }
        $this->container['nonrefundable_date_ranges'] = $nonrefundable_date_ranges;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return \OpenAPI\Client\Model\DepositItinerary[]|null
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param \OpenAPI\Client\Model\DepositItinerary[]|null $deposits deposits
     *
     * @return self
     */
    public function setDeposits($deposits)
    {
        if (is_null($deposits)) {
            throw new \InvalidArgumentException('non-nullable deposits cannot be null');
        }
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets card_on_file_limit
     *
     * @return \OpenAPI\Client\Model\Amount|null
     */
    public function getCardOnFileLimit()
    {
        return $this->container['card_on_file_limit'];
    }

    /**
     * Sets card_on_file_limit
     *
     * @param \OpenAPI\Client\Model\Amount|null $card_on_file_limit card_on_file_limit
     *
     * @return self
     */
    public function setCardOnFileLimit($card_on_file_limit)
    {
        if (is_null($card_on_file_limit)) {
            throw new \InvalidArgumentException('non-nullable card_on_file_limit cannot be null');
        }
        $this->container['card_on_file_limit'] = $card_on_file_limit;

        return $this;
    }

    /**
     * Gets refundable_damage_deposit
     *
     * @return \OpenAPI\Client\Model\Amount|null
     */
    public function getRefundableDamageDeposit()
    {
        return $this->container['refundable_damage_deposit'];
    }

    /**
     * Sets refundable_damage_deposit
     *
     * @param \OpenAPI\Client\Model\Amount|null $refundable_damage_deposit refundable_damage_deposit
     *
     * @return self
     */
    public function setRefundableDamageDeposit($refundable_damage_deposit)
    {
        if (is_null($refundable_damage_deposit)) {
            throw new \InvalidArgumentException('non-nullable refundable_damage_deposit cannot be null');
        }
        $this->container['refundable_damage_deposit'] = $refundable_damage_deposit;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \OpenAPI\Client\Model\PricingInformation|null
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \OpenAPI\Client\Model\PricingInformation|null $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        if (is_null($pricing)) {
            throw new \InvalidArgumentException('non-nullable pricing cannot be null');
        }
        $this->container['pricing'] = $pricing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



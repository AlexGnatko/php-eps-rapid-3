<?php
/**
 * ThirdPartyAuthRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ThirdPartyAuthRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThirdPartyAuthRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThirdPartyAuthRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cavv' => 'string',
        'eci' => 'string',
        'three_ds_version' => 'string',
        'ds_transaction_id' => 'string',
        'pa_res_status' => 'string',
        've_res_status' => 'string',
        'xid' => 'string',
        'cavv_algorithm' => 'string',
        'ucaf_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cavv' => null,
        'eci' => null,
        'three_ds_version' => null,
        'ds_transaction_id' => null,
        'pa_res_status' => null,
        've_res_status' => null,
        'xid' => null,
        'cavv_algorithm' => null,
        'ucaf_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cavv' => false,
		'eci' => false,
		'three_ds_version' => false,
		'ds_transaction_id' => false,
		'pa_res_status' => false,
		've_res_status' => false,
		'xid' => false,
		'cavv_algorithm' => false,
		'ucaf_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cavv' => 'cavv',
        'eci' => 'eci',
        'three_ds_version' => 'three_ds_version',
        'ds_transaction_id' => 'ds_transaction_id',
        'pa_res_status' => 'pa_res_status',
        've_res_status' => 've_res_status',
        'xid' => 'xid',
        'cavv_algorithm' => 'cavv_algorithm',
        'ucaf_indicator' => 'ucaf_indicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cavv' => 'setCavv',
        'eci' => 'setEci',
        'three_ds_version' => 'setThreeDsVersion',
        'ds_transaction_id' => 'setDsTransactionId',
        'pa_res_status' => 'setPaResStatus',
        've_res_status' => 'setVeResStatus',
        'xid' => 'setXid',
        'cavv_algorithm' => 'setCavvAlgorithm',
        'ucaf_indicator' => 'setUcafIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cavv' => 'getCavv',
        'eci' => 'getEci',
        'three_ds_version' => 'getThreeDsVersion',
        'ds_transaction_id' => 'getDsTransactionId',
        'pa_res_status' => 'getPaResStatus',
        've_res_status' => 'getVeResStatus',
        'xid' => 'getXid',
        'cavv_algorithm' => 'getCavvAlgorithm',
        'ucaf_indicator' => 'getUcafIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cavv', $data ?? [], null);
        $this->setIfExists('eci', $data ?? [], null);
        $this->setIfExists('three_ds_version', $data ?? [], null);
        $this->setIfExists('ds_transaction_id', $data ?? [], null);
        $this->setIfExists('pa_res_status', $data ?? [], null);
        $this->setIfExists('ve_res_status', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
        $this->setIfExists('cavv_algorithm', $data ?? [], null);
        $this->setIfExists('ucaf_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cavv'] === null) {
            $invalidProperties[] = "'cavv' can't be null";
        }
        if ($this->container['eci'] === null) {
            $invalidProperties[] = "'eci' can't be null";
        }
        if ($this->container['three_ds_version'] === null) {
            $invalidProperties[] = "'three_ds_version' can't be null";
        }
        if ($this->container['ds_transaction_id'] === null) {
            $invalidProperties[] = "'ds_transaction_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cavv
     *
     * @return string
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string $cavv Cryptographic element used to indicate Authentication was successfully performed
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        if (is_null($cavv)) {
            throw new \InvalidArgumentException('non-nullable cavv cannot be null');
        }
        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string $eci Electronic Commerce Indicator. The ECI is used in payer authentication to indicate the level of security used when the cardholder provided payment information to the merchant. Its value corresponds to the authentication result and the characteristics of the merchant checkout process. Each card network, e.g., Visa, MasterCard, JCB, has specific rules around the appropriate values and use of the ECI.
     *
     * @return self
     */
    public function setEci($eci)
    {
        if (is_null($eci)) {
            throw new \InvalidArgumentException('non-nullable eci cannot be null');
        }
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets three_ds_version
     *
     * @return string
     */
    public function getThreeDsVersion()
    {
        return $this->container['three_ds_version'];
    }

    /**
     * Sets three_ds_version
     *
     * @param string $three_ds_version Indicates what version of 3DS was used to authenticate the user.
     *
     * @return self
     */
    public function setThreeDsVersion($three_ds_version)
    {
        if (is_null($three_ds_version)) {
            throw new \InvalidArgumentException('non-nullable three_ds_version cannot be null');
        }
        $this->container['three_ds_version'] = $three_ds_version;

        return $this;
    }

    /**
     * Gets ds_transaction_id
     *
     * @return string
     */
    public function getDsTransactionId()
    {
        return $this->container['ds_transaction_id'];
    }

    /**
     * Sets ds_transaction_id
     *
     * @param string $ds_transaction_id Directory Server Transaction Id. Returned during authentication and is used as an additional parameter to validate that transaction was authenticated.
     *
     * @return self
     */
    public function setDsTransactionId($ds_transaction_id)
    {
        if (is_null($ds_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable ds_transaction_id cannot be null');
        }
        $this->container['ds_transaction_id'] = $ds_transaction_id;

        return $this;
    }

    /**
     * Gets pa_res_status
     *
     * @return string|null
     */
    public function getPaResStatus()
    {
        return $this->container['pa_res_status'];
    }

    /**
     * Sets pa_res_status
     *
     * @param string|null $pa_res_status set only if PAResStatus value is received in the authentication response
     *
     * @return self
     */
    public function setPaResStatus($pa_res_status)
    {
        if (is_null($pa_res_status)) {
            throw new \InvalidArgumentException('non-nullable pa_res_status cannot be null');
        }
        $this->container['pa_res_status'] = $pa_res_status;

        return $this;
    }

    /**
     * Gets ve_res_status
     *
     * @return string|null
     */
    public function getVeResStatus()
    {
        return $this->container['ve_res_status'];
    }

    /**
     * Sets ve_res_status
     *
     * @param string|null $ve_res_status set this only if PAResStatus value is received in the authentication response if Authentication was Frictionless → AuthenticationResponse.PAResStatus, if Authentication was a successful challenge → \"C\" (This is the directory response for challenge)
     *
     * @return self
     */
    public function setVeResStatus($ve_res_status)
    {
        if (is_null($ve_res_status)) {
            throw new \InvalidArgumentException('non-nullable ve_res_status cannot be null');
        }
        $this->container['ve_res_status'] = $ve_res_status;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid String used by both Visa and MasterCard which identifies a specific transaction on the Directory This string value should remain consistent throughout a transaction's history.
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        $this->container['xid'] = $xid;

        return $this;
    }

    /**
     * Gets cavv_algorithm
     *
     * @return string|null
     */
    public function getCavvAlgorithm()
    {
        return $this->container['cavv_algorithm'];
    }

    /**
     * Sets cavv_algorithm
     *
     * @param string|null $cavv_algorithm Used in some scenarios for 3DS 1.0.
     *
     * @return self
     */
    public function setCavvAlgorithm($cavv_algorithm)
    {
        if (is_null($cavv_algorithm)) {
            throw new \InvalidArgumentException('non-nullable cavv_algorithm cannot be null');
        }
        $this->container['cavv_algorithm'] = $cavv_algorithm;

        return $this;
    }

    /**
     * Gets ucaf_indicator
     *
     * @return string|null
     */
    public function getUcafIndicator()
    {
        return $this->container['ucaf_indicator'];
    }

    /**
     * Sets ucaf_indicator
     *
     * @param string|null $ucaf_indicator Only received for Mastercard transactions, else can be null. 0 - Non-SecureCode transaction, bypassed by the Merchant 1 - Merchant-Only SecureCode transaction 2 - Fully authenticated SecureCode transaction
     *
     * @return self
     */
    public function setUcafIndicator($ucaf_indicator)
    {
        if (is_null($ucaf_indicator)) {
            throw new \InvalidArgumentException('non-nullable ucaf_indicator cannot be null');
        }
        $this->container['ucaf_indicator'] = $ucaf_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * RoomItinerary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RoomItinerary Class Doc Comment
 *
 * @category Class
 * @description The room information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RoomItinerary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RoomItinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'confirmation_id' => '\OpenAPI\Client\Model\ConfirmationId',
        'bed_group_id' => 'string',
        'checkin' => 'string',
        'checkout' => 'string',
        'number_of_adults' => 'float',
        'child_ages' => 'float[]',
        'given_name' => 'string',
        'family_name' => 'string',
        'status' => '\OpenAPI\Client\Model\StatusItinerary',
        'special_request' => 'string',
        'smoking' => 'bool',
        'loyalty_id' => 'string',
        'rate' => '\OpenAPI\Client\Model\RateItinerary',
        'links' => '\OpenAPI\Client\Model\RoomItineraryLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'confirmation_id' => null,
        'bed_group_id' => null,
        'checkin' => null,
        'checkout' => null,
        'number_of_adults' => null,
        'child_ages' => null,
        'given_name' => null,
        'family_name' => null,
        'status' => null,
        'special_request' => null,
        'smoking' => null,
        'loyalty_id' => null,
        'rate' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'confirmation_id' => false,
		'bed_group_id' => false,
		'checkin' => false,
		'checkout' => false,
		'number_of_adults' => false,
		'child_ages' => false,
		'given_name' => false,
		'family_name' => false,
		'status' => false,
		'special_request' => false,
		'smoking' => false,
		'loyalty_id' => false,
		'rate' => false,
		'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'confirmation_id' => 'confirmation_id',
        'bed_group_id' => 'bed_group_id',
        'checkin' => 'checkin',
        'checkout' => 'checkout',
        'number_of_adults' => 'number_of_adults',
        'child_ages' => 'child_ages',
        'given_name' => 'given_name',
        'family_name' => 'family_name',
        'status' => 'status',
        'special_request' => 'special_request',
        'smoking' => 'smoking',
        'loyalty_id' => 'loyalty_id',
        'rate' => 'rate',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'confirmation_id' => 'setConfirmationId',
        'bed_group_id' => 'setBedGroupId',
        'checkin' => 'setCheckin',
        'checkout' => 'setCheckout',
        'number_of_adults' => 'setNumberOfAdults',
        'child_ages' => 'setChildAges',
        'given_name' => 'setGivenName',
        'family_name' => 'setFamilyName',
        'status' => 'setStatus',
        'special_request' => 'setSpecialRequest',
        'smoking' => 'setSmoking',
        'loyalty_id' => 'setLoyaltyId',
        'rate' => 'setRate',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'confirmation_id' => 'getConfirmationId',
        'bed_group_id' => 'getBedGroupId',
        'checkin' => 'getCheckin',
        'checkout' => 'getCheckout',
        'number_of_adults' => 'getNumberOfAdults',
        'child_ages' => 'getChildAges',
        'given_name' => 'getGivenName',
        'family_name' => 'getFamilyName',
        'status' => 'getStatus',
        'special_request' => 'getSpecialRequest',
        'smoking' => 'getSmoking',
        'loyalty_id' => 'getLoyaltyId',
        'rate' => 'getRate',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('confirmation_id', $data ?? [], null);
        $this->setIfExists('bed_group_id', $data ?? [], null);
        $this->setIfExists('checkin', $data ?? [], null);
        $this->setIfExists('checkout', $data ?? [], null);
        $this->setIfExists('number_of_adults', $data ?? [], null);
        $this->setIfExists('child_ages', $data ?? [], null);
        $this->setIfExists('given_name', $data ?? [], null);
        $this->setIfExists('family_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('special_request', $data ?? [], null);
        $this->setIfExists('smoking', $data ?? [], null);
        $this->setIfExists('loyalty_id', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The room id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets confirmation_id
     *
     * @return \OpenAPI\Client\Model\ConfirmationId|null
     */
    public function getConfirmationId()
    {
        return $this->container['confirmation_id'];
    }

    /**
     * Sets confirmation_id
     *
     * @param \OpenAPI\Client\Model\ConfirmationId|null $confirmation_id confirmation_id
     *
     * @return self
     */
    public function setConfirmationId($confirmation_id)
    {
        if (is_null($confirmation_id)) {
            throw new \InvalidArgumentException('non-nullable confirmation_id cannot be null');
        }
        $this->container['confirmation_id'] = $confirmation_id;

        return $this;
    }

    /**
     * Gets bed_group_id
     *
     * @return string|null
     */
    public function getBedGroupId()
    {
        return $this->container['bed_group_id'];
    }

    /**
     * Sets bed_group_id
     *
     * @param string|null $bed_group_id Unique identifier for a bed type.
     *
     * @return self
     */
    public function setBedGroupId($bed_group_id)
    {
        if (is_null($bed_group_id)) {
            throw new \InvalidArgumentException('non-nullable bed_group_id cannot be null');
        }
        $this->container['bed_group_id'] = $bed_group_id;

        return $this;
    }

    /**
     * Gets checkin
     *
     * @return string|null
     */
    public function getCheckin()
    {
        return $this->container['checkin'];
    }

    /**
     * Sets checkin
     *
     * @param string|null $checkin The check-in date of the itinerary.
     *
     * @return self
     */
    public function setCheckin($checkin)
    {
        if (is_null($checkin)) {
            throw new \InvalidArgumentException('non-nullable checkin cannot be null');
        }
        $this->container['checkin'] = $checkin;

        return $this;
    }

    /**
     * Gets checkout
     *
     * @return string|null
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     *
     * @param string|null $checkout The check-out date of the itinerary.
     *
     * @return self
     */
    public function setCheckout($checkout)
    {
        if (is_null($checkout)) {
            throw new \InvalidArgumentException('non-nullable checkout cannot be null');
        }
        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets number_of_adults
     *
     * @return float|null
     */
    public function getNumberOfAdults()
    {
        return $this->container['number_of_adults'];
    }

    /**
     * Sets number_of_adults
     *
     * @param float|null $number_of_adults The number of adults staying in the room.
     *
     * @return self
     */
    public function setNumberOfAdults($number_of_adults)
    {
        if (is_null($number_of_adults)) {
            throw new \InvalidArgumentException('non-nullable number_of_adults cannot be null');
        }
        $this->container['number_of_adults'] = $number_of_adults;

        return $this;
    }

    /**
     * Gets child_ages
     *
     * @return float[]|null
     */
    public function getChildAges()
    {
        return $this->container['child_ages'];
    }

    /**
     * Sets child_ages
     *
     * @param float[]|null $child_ages The ages of children for the room.
     *
     * @return self
     */
    public function setChildAges($child_ages)
    {
        if (is_null($child_ages)) {
            throw new \InvalidArgumentException('non-nullable child_ages cannot be null');
        }
        $this->container['child_ages'] = $child_ages;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name The first name of the main guest staying in the room.
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        if (is_null($given_name)) {
            throw new \InvalidArgumentException('non-nullable given_name cannot be null');
        }
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name The last name of the main guest staying in the room.
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {
        if (is_null($family_name)) {
            throw new \InvalidArgumentException('non-nullable family_name cannot be null');
        }
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\StatusItinerary|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\StatusItinerary|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets special_request
     *
     * @return string|null
     */
    public function getSpecialRequest()
    {
        return $this->container['special_request'];
    }

    /**
     * Sets special_request
     *
     * @param string|null $special_request Any special request info associated with the room.
     *
     * @return self
     */
    public function setSpecialRequest($special_request)
    {
        if (is_null($special_request)) {
            throw new \InvalidArgumentException('non-nullable special_request cannot be null');
        }
        $this->container['special_request'] = $special_request;

        return $this;
    }

    /**
     * Gets smoking
     *
     * @return bool|null
     */
    public function getSmoking()
    {
        return $this->container['smoking'];
    }

    /**
     * Sets smoking
     *
     * @param bool|null $smoking Indicates if the room is smoking or non-smoking.
     *
     * @return self
     */
    public function setSmoking($smoking)
    {
        if (is_null($smoking)) {
            throw new \InvalidArgumentException('non-nullable smoking cannot be null');
        }
        $this->container['smoking'] = $smoking;

        return $this;
    }

    /**
     * Gets loyalty_id
     *
     * @return string|null
     */
    public function getLoyaltyId()
    {
        return $this->container['loyalty_id'];
    }

    /**
     * Sets loyalty_id
     *
     * @param string|null $loyalty_id A loyalty identifier for a hotel loyalty program associated with this room guest.
     *
     * @return self
     */
    public function setLoyaltyId($loyalty_id)
    {
        if (is_null($loyalty_id)) {
            throw new \InvalidArgumentException('non-nullable loyalty_id cannot be null');
        }
        $this->container['loyalty_id'] = $loyalty_id;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return \OpenAPI\Client\Model\RateItinerary|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param \OpenAPI\Client\Model\RateItinerary|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\RoomItineraryLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\RoomItineraryLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



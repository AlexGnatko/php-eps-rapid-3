<?php
/**
 * Rate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @description A rate.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Rate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => '\OpenAPI\Client\Model\Status',
        'available_rooms' => 'float',
        'refundable' => 'bool',
        'member_deal_available' => 'bool',
        'sale_scenario' => '\OpenAPI\Client\Model\SaleScenario',
        'merchant_of_record' => '\OpenAPI\Client\Model\MerchantOfRecord',
        'amenities' => 'array<string,\OpenAPI\Client\Model\Amenity>',
        'links' => '\OpenAPI\Client\Model\RateLinks',
        'bed_groups' => 'array<string,\OpenAPI\Client\Model\BedGroupAvailability>',
        'cancel_penalties' => '\OpenAPI\Client\Model\CancelPenalty[]',
        'nonrefundable_date_ranges' => '\OpenAPI\Client\Model\NonrefundableDateRange[]',
        'occupancy_pricing' => 'array<string,\OpenAPI\Client\Model\PricingInformation>',
        'promotions' => '\OpenAPI\Client\Model\Promotions',
        'card_on_file_limit' => '\OpenAPI\Client\Model\Amount',
        'refundable_damage_deposit' => '\OpenAPI\Client\Model\Amount',
        'deposits' => '\OpenAPI\Client\Model\Deposit[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'available_rooms' => null,
        'refundable' => null,
        'member_deal_available' => null,
        'sale_scenario' => null,
        'merchant_of_record' => null,
        'amenities' => null,
        'links' => null,
        'bed_groups' => null,
        'cancel_penalties' => null,
        'nonrefundable_date_ranges' => null,
        'occupancy_pricing' => null,
        'promotions' => null,
        'card_on_file_limit' => null,
        'refundable_damage_deposit' => null,
        'deposits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'status' => false,
		'available_rooms' => false,
		'refundable' => false,
		'member_deal_available' => false,
		'sale_scenario' => false,
		'merchant_of_record' => false,
		'amenities' => false,
		'links' => false,
		'bed_groups' => false,
		'cancel_penalties' => false,
		'nonrefundable_date_ranges' => false,
		'occupancy_pricing' => false,
		'promotions' => false,
		'card_on_file_limit' => false,
		'refundable_damage_deposit' => false,
		'deposits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'available_rooms' => 'available_rooms',
        'refundable' => 'refundable',
        'member_deal_available' => 'member_deal_available',
        'sale_scenario' => 'sale_scenario',
        'merchant_of_record' => 'merchant_of_record',
        'amenities' => 'amenities',
        'links' => 'links',
        'bed_groups' => 'bed_groups',
        'cancel_penalties' => 'cancel_penalties',
        'nonrefundable_date_ranges' => 'nonrefundable_date_ranges',
        'occupancy_pricing' => 'occupancy_pricing',
        'promotions' => 'promotions',
        'card_on_file_limit' => 'card_on_file_limit',
        'refundable_damage_deposit' => 'refundable_damage_deposit',
        'deposits' => 'deposits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'available_rooms' => 'setAvailableRooms',
        'refundable' => 'setRefundable',
        'member_deal_available' => 'setMemberDealAvailable',
        'sale_scenario' => 'setSaleScenario',
        'merchant_of_record' => 'setMerchantOfRecord',
        'amenities' => 'setAmenities',
        'links' => 'setLinks',
        'bed_groups' => 'setBedGroups',
        'cancel_penalties' => 'setCancelPenalties',
        'nonrefundable_date_ranges' => 'setNonrefundableDateRanges',
        'occupancy_pricing' => 'setOccupancyPricing',
        'promotions' => 'setPromotions',
        'card_on_file_limit' => 'setCardOnFileLimit',
        'refundable_damage_deposit' => 'setRefundableDamageDeposit',
        'deposits' => 'setDeposits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'available_rooms' => 'getAvailableRooms',
        'refundable' => 'getRefundable',
        'member_deal_available' => 'getMemberDealAvailable',
        'sale_scenario' => 'getSaleScenario',
        'merchant_of_record' => 'getMerchantOfRecord',
        'amenities' => 'getAmenities',
        'links' => 'getLinks',
        'bed_groups' => 'getBedGroups',
        'cancel_penalties' => 'getCancelPenalties',
        'nonrefundable_date_ranges' => 'getNonrefundableDateRanges',
        'occupancy_pricing' => 'getOccupancyPricing',
        'promotions' => 'getPromotions',
        'card_on_file_limit' => 'getCardOnFileLimit',
        'refundable_damage_deposit' => 'getRefundableDamageDeposit',
        'deposits' => 'getDeposits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('available_rooms', $data ?? [], null);
        $this->setIfExists('refundable', $data ?? [], null);
        $this->setIfExists('member_deal_available', $data ?? [], null);
        $this->setIfExists('sale_scenario', $data ?? [], null);
        $this->setIfExists('merchant_of_record', $data ?? [], null);
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('bed_groups', $data ?? [], null);
        $this->setIfExists('cancel_penalties', $data ?? [], null);
        $this->setIfExists('nonrefundable_date_ranges', $data ?? [], null);
        $this->setIfExists('occupancy_pricing', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('card_on_file_limit', $data ?? [], null);
        $this->setIfExists('refundable_damage_deposit', $data ?? [], null);
        $this->setIfExists('deposits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique Identifier for a rate.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\Status|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\Status|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets available_rooms
     *
     * @return float|null
     */
    public function getAvailableRooms()
    {
        return $this->container['available_rooms'];
    }

    /**
     * Sets available_rooms
     *
     * @param float|null $available_rooms The number of bookable rooms remaining with this rate in EPS inventory. Use this value to create rules for urgency messaging to alert users to low availability on busy travel dates or at popular properties. If the value returns as 2147483647 (max int value), the actual value could not be determined. Ensure your urgency messaging ignores such instances when returned.
     *
     * @return self
     */
    public function setAvailableRooms($available_rooms)
    {
        if (is_null($available_rooms)) {
            throw new \InvalidArgumentException('non-nullable available_rooms cannot be null');
        }
        $this->container['available_rooms'] = $available_rooms;

        return $this;
    }

    /**
     * Gets refundable
     *
     * @return bool|null
     */
    public function getRefundable()
    {
        return $this->container['refundable'];
    }

    /**
     * Sets refundable
     *
     * @param bool|null $refundable Indicates if the rate is fully refundable at the time of booking. Cancel penalties may still apply. Please refer to the cancel penalties section for reference.
     *
     * @return self
     */
    public function setRefundable($refundable)
    {
        if (is_null($refundable)) {
            throw new \InvalidArgumentException('non-nullable refundable cannot be null');
        }
        $this->container['refundable'] = $refundable;

        return $this;
    }

    /**
     * Gets member_deal_available
     *
     * @return bool|null
     */
    public function getMemberDealAvailable()
    {
        return $this->container['member_deal_available'];
    }

    /**
     * Sets member_deal_available
     *
     * @param bool|null $member_deal_available Indicates if a \"Member Only Deal\" is available for this rate.
     *
     * @return self
     */
    public function setMemberDealAvailable($member_deal_available)
    {
        if (is_null($member_deal_available)) {
            throw new \InvalidArgumentException('non-nullable member_deal_available cannot be null');
        }
        $this->container['member_deal_available'] = $member_deal_available;

        return $this;
    }

    /**
     * Gets sale_scenario
     *
     * @return \OpenAPI\Client\Model\SaleScenario|null
     */
    public function getSaleScenario()
    {
        return $this->container['sale_scenario'];
    }

    /**
     * Sets sale_scenario
     *
     * @param \OpenAPI\Client\Model\SaleScenario|null $sale_scenario sale_scenario
     *
     * @return self
     */
    public function setSaleScenario($sale_scenario)
    {
        if (is_null($sale_scenario)) {
            throw new \InvalidArgumentException('non-nullable sale_scenario cannot be null');
        }
        $this->container['sale_scenario'] = $sale_scenario;

        return $this;
    }

    /**
     * Gets merchant_of_record
     *
     * @return \OpenAPI\Client\Model\MerchantOfRecord|null
     */
    public function getMerchantOfRecord()
    {
        return $this->container['merchant_of_record'];
    }

    /**
     * Sets merchant_of_record
     *
     * @param \OpenAPI\Client\Model\MerchantOfRecord|null $merchant_of_record merchant_of_record
     *
     * @return self
     */
    public function setMerchantOfRecord($merchant_of_record)
    {
        if (is_null($merchant_of_record)) {
            throw new \InvalidArgumentException('non-nullable merchant_of_record cannot be null');
        }
        $this->container['merchant_of_record'] = $merchant_of_record;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return array<string,\OpenAPI\Client\Model\Amenity>|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param array<string,\OpenAPI\Client\Model\Amenity>|null $amenities Room amenities.
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\RateLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\RateLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets bed_groups
     *
     * @return array<string,\OpenAPI\Client\Model\BedGroupAvailability>|null
     */
    public function getBedGroups()
    {
        return $this->container['bed_groups'];
    }

    /**
     * Sets bed_groups
     *
     * @param array<string,\OpenAPI\Client\Model\BedGroupAvailability>|null $bed_groups A map of the room's bed groups.
     *
     * @return self
     */
    public function setBedGroups($bed_groups)
    {
        if (is_null($bed_groups)) {
            throw new \InvalidArgumentException('non-nullable bed_groups cannot be null');
        }
        $this->container['bed_groups'] = $bed_groups;

        return $this;
    }

    /**
     * Gets cancel_penalties
     *
     * @return \OpenAPI\Client\Model\CancelPenalty[]|null
     */
    public function getCancelPenalties()
    {
        return $this->container['cancel_penalties'];
    }

    /**
     * Sets cancel_penalties
     *
     * @param \OpenAPI\Client\Model\CancelPenalty[]|null $cancel_penalties Array of `cancel_penalty` objects containing cancel penalty information.
     *
     * @return self
     */
    public function setCancelPenalties($cancel_penalties)
    {
        if (is_null($cancel_penalties)) {
            throw new \InvalidArgumentException('non-nullable cancel_penalties cannot be null');
        }
        $this->container['cancel_penalties'] = $cancel_penalties;

        return $this;
    }

    /**
     * Gets nonrefundable_date_ranges
     *
     * @return \OpenAPI\Client\Model\NonrefundableDateRange[]|null
     */
    public function getNonrefundableDateRanges()
    {
        return $this->container['nonrefundable_date_ranges'];
    }

    /**
     * Sets nonrefundable_date_ranges
     *
     * @param \OpenAPI\Client\Model\NonrefundableDateRange[]|null $nonrefundable_date_ranges An array of stay date ranges within this check-in / check-out range that are not refundable. Stay dates within these ranges provide no refund on cancellation, regardless of cancel penalty windows. The stay dates are determined by the would be check-in of that night. With a check-in date of 2023-09-01, and a check-out date of 2023-09-06, this would be a 5 night stay. A `nonrefundable_date_range` with start: 2023-09-02 and end: 2023-09-03 would mean 2 of the nights are nonrefundable. The 1st night is refundable, the 2nd and 3rd nights are nonrefundable, and the 4th and 5th nights are refundable, subject to `cancel_penalties` restrictions.
     *
     * @return self
     */
    public function setNonrefundableDateRanges($nonrefundable_date_ranges)
    {
        if (is_null($nonrefundable_date_ranges)) {
            throw new \InvalidArgumentException('non-nullable nonrefundable_date_ranges cannot be null');
        }
        $this->container['nonrefundable_date_ranges'] = $nonrefundable_date_ranges;

        return $this;
    }

    /**
     * Gets occupancy_pricing
     *
     * @return array<string,\OpenAPI\Client\Model\PricingInformation>|null
     */
    public function getOccupancyPricing()
    {
        return $this->container['occupancy_pricing'];
    }

    /**
     * Sets occupancy_pricing
     *
     * @param array<string,\OpenAPI\Client\Model\PricingInformation>|null $occupancy_pricing A map of room information by occupancy.
     *
     * @return self
     */
    public function setOccupancyPricing($occupancy_pricing)
    {
        if (is_null($occupancy_pricing)) {
            throw new \InvalidArgumentException('non-nullable occupancy_pricing cannot be null');
        }
        $this->container['occupancy_pricing'] = $occupancy_pricing;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \OpenAPI\Client\Model\Promotions|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \OpenAPI\Client\Model\Promotions|null $promotions promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets card_on_file_limit
     *
     * @return \OpenAPI\Client\Model\Amount|null
     */
    public function getCardOnFileLimit()
    {
        return $this->container['card_on_file_limit'];
    }

    /**
     * Sets card_on_file_limit
     *
     * @param \OpenAPI\Client\Model\Amount|null $card_on_file_limit card_on_file_limit
     *
     * @return self
     */
    public function setCardOnFileLimit($card_on_file_limit)
    {
        if (is_null($card_on_file_limit)) {
            throw new \InvalidArgumentException('non-nullable card_on_file_limit cannot be null');
        }
        $this->container['card_on_file_limit'] = $card_on_file_limit;

        return $this;
    }

    /**
     * Gets refundable_damage_deposit
     *
     * @return \OpenAPI\Client\Model\Amount|null
     */
    public function getRefundableDamageDeposit()
    {
        return $this->container['refundable_damage_deposit'];
    }

    /**
     * Sets refundable_damage_deposit
     *
     * @param \OpenAPI\Client\Model\Amount|null $refundable_damage_deposit refundable_damage_deposit
     *
     * @return self
     */
    public function setRefundableDamageDeposit($refundable_damage_deposit)
    {
        if (is_null($refundable_damage_deposit)) {
            throw new \InvalidArgumentException('non-nullable refundable_damage_deposit cannot be null');
        }
        $this->container['refundable_damage_deposit'] = $refundable_damage_deposit;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return \OpenAPI\Client\Model\Deposit[]|null
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param \OpenAPI\Client\Model\Deposit[]|null $deposits Array of deposits for the rate.
     *
     * @return self
     */
    public function setDeposits($deposits)
    {
        if (is_null($deposits)) {
            throw new \InvalidArgumentException('non-nullable deposits cannot be null');
        }
        $this->container['deposits'] = $deposits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



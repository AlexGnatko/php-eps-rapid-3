<?php
/**
 * GuestRating
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GuestRating Class Doc Comment
 *
 * @category Class
 * @description Rating information provided by guests who stayed at this property.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GuestRating implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GuestRating';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'count' => 'float',
        'overall' => 'string',
        'cleanliness' => 'string',
        'service' => 'string',
        'comfort' => 'string',
        'condition' => 'string',
        'location' => 'string',
        'neighborhood' => 'string',
        'quality' => 'string',
        'value' => 'string',
        'amenities' => 'string',
        'recommendation_percent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'count' => null,
        'overall' => null,
        'cleanliness' => null,
        'service' => null,
        'comfort' => null,
        'condition' => null,
        'location' => null,
        'neighborhood' => null,
        'quality' => null,
        'value' => null,
        'amenities' => null,
        'recommendation_percent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'count' => false,
		'overall' => false,
		'cleanliness' => false,
		'service' => false,
		'comfort' => false,
		'condition' => false,
		'location' => false,
		'neighborhood' => false,
		'quality' => false,
		'value' => false,
		'amenities' => false,
		'recommendation_percent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'count',
        'overall' => 'overall',
        'cleanliness' => 'cleanliness',
        'service' => 'service',
        'comfort' => 'comfort',
        'condition' => 'condition',
        'location' => 'location',
        'neighborhood' => 'neighborhood',
        'quality' => 'quality',
        'value' => 'value',
        'amenities' => 'amenities',
        'recommendation_percent' => 'recommendation_percent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'overall' => 'setOverall',
        'cleanliness' => 'setCleanliness',
        'service' => 'setService',
        'comfort' => 'setComfort',
        'condition' => 'setCondition',
        'location' => 'setLocation',
        'neighborhood' => 'setNeighborhood',
        'quality' => 'setQuality',
        'value' => 'setValue',
        'amenities' => 'setAmenities',
        'recommendation_percent' => 'setRecommendationPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'overall' => 'getOverall',
        'cleanliness' => 'getCleanliness',
        'service' => 'getService',
        'comfort' => 'getComfort',
        'condition' => 'getCondition',
        'location' => 'getLocation',
        'neighborhood' => 'getNeighborhood',
        'quality' => 'getQuality',
        'value' => 'getValue',
        'amenities' => 'getAmenities',
        'recommendation_percent' => 'getRecommendationPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('overall', $data ?? [], null);
        $this->setIfExists('cleanliness', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('comfort', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('neighborhood', $data ?? [], null);
        $this->setIfExists('quality', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('recommendation_percent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count
     *
     * @return float|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param float|null $count A count of all of the guest review ratings which currently exist for this property.
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets overall
     *
     * @return string|null
     */
    public function getOverall()
    {
        return $this->container['overall'];
    }

    /**
     * Sets overall
     *
     * @param string|null $overall The overall rating for the property, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setOverall($overall)
    {
        if (is_null($overall)) {
            throw new \InvalidArgumentException('non-nullable overall cannot be null');
        }
        $this->container['overall'] = $overall;

        return $this;
    }

    /**
     * Gets cleanliness
     *
     * @return string|null
     */
    public function getCleanliness()
    {
        return $this->container['cleanliness'];
    }

    /**
     * Sets cleanliness
     *
     * @param string|null $cleanliness The cleanliness rating for the property, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setCleanliness($cleanliness)
    {
        if (is_null($cleanliness)) {
            throw new \InvalidArgumentException('non-nullable cleanliness cannot be null');
        }
        $this->container['cleanliness'] = $cleanliness;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string|null $service The rating of the staff's service for the property, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets comfort
     *
     * @return string|null
     */
    public function getComfort()
    {
        return $this->container['comfort'];
    }

    /**
     * Sets comfort
     *
     * @param string|null $comfort The comfort rating of the rooms, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setComfort($comfort)
    {
        if (is_null($comfort)) {
            throw new \InvalidArgumentException('non-nullable comfort cannot be null');
        }
        $this->container['comfort'] = $comfort;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The rating for the property's condition, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The rating for how convinent the location of the property is, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets neighborhood
     *
     * @return string|null
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     *
     * @param string|null $neighborhood The rating for how satisfying the neighborhood of the property is, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setNeighborhood($neighborhood)
    {
        if (is_null($neighborhood)) {
            throw new \InvalidArgumentException('non-nullable neighborhood cannot be null');
        }
        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string|null
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string|null $quality The quality rating of the rooms, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setQuality($quality)
    {
        if (is_null($quality)) {
            throw new \InvalidArgumentException('non-nullable quality cannot be null');
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The rating for how much value the property provided for the cost of the stay, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return string|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param string|null $amenities The rating for the amenities provided by the property, averaged from all guest reviews. Returns a value between 1.0 and 5.0.
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets recommendation_percent
     *
     * @return string|null
     */
    public function getRecommendationPercent()
    {
        return $this->container['recommendation_percent'];
    }

    /**
     * Sets recommendation_percent
     *
     * @param string|null $recommendation_percent The percent of guests who recommend staying at this property.
     *
     * @return self
     */
    public function setRecommendationPercent($recommendation_percent)
    {
        if (is_null($recommendation_percent)) {
            throw new \InvalidArgumentException('non-nullable recommendation_percent cannot be null');
        }
        $this->container['recommendation_percent'] = $recommendation_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Descriptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Descriptions Class Doc Comment
 *
 * @category Class
 * @description Descriptions of a property.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Descriptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Descriptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amenities' => 'string',
        'dining' => 'string',
        'renovations' => 'string',
        'national_ratings' => 'string',
        'business_amenities' => 'string',
        'rooms' => 'string',
        'attractions' => 'string',
        'location' => 'string',
        'headline' => 'string',
        'general' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amenities' => null,
        'dining' => null,
        'renovations' => null,
        'national_ratings' => null,
        'business_amenities' => null,
        'rooms' => null,
        'attractions' => null,
        'location' => null,
        'headline' => null,
        'general' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amenities' => false,
		'dining' => false,
		'renovations' => false,
		'national_ratings' => false,
		'business_amenities' => false,
		'rooms' => false,
		'attractions' => false,
		'location' => false,
		'headline' => false,
		'general' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amenities' => 'amenities',
        'dining' => 'dining',
        'renovations' => 'renovations',
        'national_ratings' => 'national_ratings',
        'business_amenities' => 'business_amenities',
        'rooms' => 'rooms',
        'attractions' => 'attractions',
        'location' => 'location',
        'headline' => 'headline',
        'general' => 'general'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amenities' => 'setAmenities',
        'dining' => 'setDining',
        'renovations' => 'setRenovations',
        'national_ratings' => 'setNationalRatings',
        'business_amenities' => 'setBusinessAmenities',
        'rooms' => 'setRooms',
        'attractions' => 'setAttractions',
        'location' => 'setLocation',
        'headline' => 'setHeadline',
        'general' => 'setGeneral'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amenities' => 'getAmenities',
        'dining' => 'getDining',
        'renovations' => 'getRenovations',
        'national_ratings' => 'getNationalRatings',
        'business_amenities' => 'getBusinessAmenities',
        'rooms' => 'getRooms',
        'attractions' => 'getAttractions',
        'location' => 'getLocation',
        'headline' => 'getHeadline',
        'general' => 'getGeneral'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('dining', $data ?? [], null);
        $this->setIfExists('renovations', $data ?? [], null);
        $this->setIfExists('national_ratings', $data ?? [], null);
        $this->setIfExists('business_amenities', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('attractions', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('headline', $data ?? [], null);
        $this->setIfExists('general', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amenities
     *
     * @return string|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param string|null $amenities Describes general building amenities at the property.
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets dining
     *
     * @return string|null
     */
    public function getDining()
    {
        return $this->container['dining'];
    }

    /**
     * Sets dining
     *
     * @param string|null $dining Describes dining accommodations at the property.
     *
     * @return self
     */
    public function setDining($dining)
    {
        if (is_null($dining)) {
            throw new \InvalidArgumentException('non-nullable dining cannot be null');
        }
        $this->container['dining'] = $dining;

        return $this;
    }

    /**
     * Gets renovations
     *
     * @return string|null
     */
    public function getRenovations()
    {
        return $this->container['renovations'];
    }

    /**
     * Sets renovations
     *
     * @param string|null $renovations Describes any recent room or property renovations.
     *
     * @return self
     */
    public function setRenovations($renovations)
    {
        if (is_null($renovations)) {
            throw new \InvalidArgumentException('non-nullable renovations cannot be null');
        }
        $this->container['renovations'] = $renovations;

        return $this;
    }

    /**
     * Gets national_ratings
     *
     * @return string|null
     */
    public function getNationalRatings()
    {
        return $this->container['national_ratings'];
    }

    /**
     * Sets national_ratings
     *
     * @param string|null $national_ratings States the source of the property's star rating (such as a regional or national tourism agency) and any other ratings claimed.
     *
     * @return self
     */
    public function setNationalRatings($national_ratings)
    {
        if (is_null($national_ratings)) {
            throw new \InvalidArgumentException('non-nullable national_ratings cannot be null');
        }
        $this->container['national_ratings'] = $national_ratings;

        return $this;
    }

    /**
     * Gets business_amenities
     *
     * @return string|null
     */
    public function getBusinessAmenities()
    {
        return $this->container['business_amenities'];
    }

    /**
     * Sets business_amenities
     *
     * @param string|null $business_amenities Describes any business-specific amenities at the property, e.g. conference rooms.
     *
     * @return self
     */
    public function setBusinessAmenities($business_amenities)
    {
        if (is_null($business_amenities)) {
            throw new \InvalidArgumentException('non-nullable business_amenities cannot be null');
        }
        $this->container['business_amenities'] = $business_amenities;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return string|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param string|null $rooms Describes typical room amenities.
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets attractions
     *
     * @return string|null
     */
    public function getAttractions()
    {
        return $this->container['attractions'];
    }

    /**
     * Sets attractions
     *
     * @param string|null $attractions Nearby attractions/areas, often including distances from the property.
     *
     * @return self
     */
    public function setAttractions($attractions)
    {
        if (is_null($attractions)) {
            throw new \InvalidArgumentException('non-nullable attractions cannot be null');
        }
        $this->container['attractions'] = $attractions;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location General location as entered by the property.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string|null
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string|null $headline A headline description for the property.
     *
     * @return self
     */
    public function setHeadline($headline)
    {
        if (is_null($headline)) {
            throw new \InvalidArgumentException('non-nullable headline cannot be null');
        }
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets general
     *
     * @return string|null
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param string|null $general A general description of a vacation rental property.
     *
     * @return self
     */
    public function setGeneral($general)
    {
        if (is_null($general)) {
            throw new \InvalidArgumentException('non-nullable general cannot be null');
        }
        $this->container['general'] = $general;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



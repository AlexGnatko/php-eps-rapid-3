<?php
/**
 * VacationRentalDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VacationRentalDetails Class Doc Comment
 *
 * @category Class
 * @description Details for vacation rental properties.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VacationRentalDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VacationRentalDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'registry_number' => 'string',
        'private_host' => 'bool',
        'property_manager' => '\OpenAPI\Client\Model\PropertyManager',
        'rental_agreement' => '\OpenAPI\Client\Model\RentalAgreement',
        'house_rules' => 'string[]',
        'enhanced_house_rules' => 'array<string,\OpenAPI\Client\Model\EnhancedHouseRules>',
        'amenities' => '\OpenAPI\Client\Model\Amenity',
        'vrbo_srp_id' => 'string',
        'listing_id' => 'string',
        'listing_number' => 'string',
        'listing_source' => 'string',
        'listing_unit' => 'string',
        'ipm_name' => 'string',
        'unit_configurations' => 'array<string,\OpenAPI\Client\Model\UnitConfiguration[]>',
        'free_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'registry_number' => null,
        'private_host' => null,
        'property_manager' => null,
        'rental_agreement' => null,
        'house_rules' => null,
        'enhanced_house_rules' => null,
        'amenities' => null,
        'vrbo_srp_id' => null,
        'listing_id' => null,
        'listing_number' => null,
        'listing_source' => null,
        'listing_unit' => null,
        'ipm_name' => null,
        'unit_configurations' => null,
        'free_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'registry_number' => false,
		'private_host' => false,
		'property_manager' => false,
		'rental_agreement' => false,
		'house_rules' => false,
		'enhanced_house_rules' => false,
		'amenities' => false,
		'vrbo_srp_id' => false,
		'listing_id' => false,
		'listing_number' => false,
		'listing_source' => false,
		'listing_unit' => false,
		'ipm_name' => false,
		'unit_configurations' => false,
		'free_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registry_number' => 'registry_number',
        'private_host' => 'private_host',
        'property_manager' => 'property_manager',
        'rental_agreement' => 'rental_agreement',
        'house_rules' => 'house_rules',
        'enhanced_house_rules' => 'enhanced_house_rules',
        'amenities' => 'amenities',
        'vrbo_srp_id' => 'vrbo_srp_id',
        'listing_id' => 'listing_id',
        'listing_number' => 'listing_number',
        'listing_source' => 'listing_source',
        'listing_unit' => 'listing_unit',
        'ipm_name' => 'ipm_name',
        'unit_configurations' => 'unit_configurations',
        'free_text' => 'free_text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registry_number' => 'setRegistryNumber',
        'private_host' => 'setPrivateHost',
        'property_manager' => 'setPropertyManager',
        'rental_agreement' => 'setRentalAgreement',
        'house_rules' => 'setHouseRules',
        'enhanced_house_rules' => 'setEnhancedHouseRules',
        'amenities' => 'setAmenities',
        'vrbo_srp_id' => 'setVrboSrpId',
        'listing_id' => 'setListingId',
        'listing_number' => 'setListingNumber',
        'listing_source' => 'setListingSource',
        'listing_unit' => 'setListingUnit',
        'ipm_name' => 'setIpmName',
        'unit_configurations' => 'setUnitConfigurations',
        'free_text' => 'setFreeText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registry_number' => 'getRegistryNumber',
        'private_host' => 'getPrivateHost',
        'property_manager' => 'getPropertyManager',
        'rental_agreement' => 'getRentalAgreement',
        'house_rules' => 'getHouseRules',
        'enhanced_house_rules' => 'getEnhancedHouseRules',
        'amenities' => 'getAmenities',
        'vrbo_srp_id' => 'getVrboSrpId',
        'listing_id' => 'getListingId',
        'listing_number' => 'getListingNumber',
        'listing_source' => 'getListingSource',
        'listing_unit' => 'getListingUnit',
        'ipm_name' => 'getIpmName',
        'unit_configurations' => 'getUnitConfigurations',
        'free_text' => 'getFreeText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('registry_number', $data ?? [], null);
        $this->setIfExists('private_host', $data ?? [], null);
        $this->setIfExists('property_manager', $data ?? [], null);
        $this->setIfExists('rental_agreement', $data ?? [], null);
        $this->setIfExists('house_rules', $data ?? [], null);
        $this->setIfExists('enhanced_house_rules', $data ?? [], null);
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('vrbo_srp_id', $data ?? [], null);
        $this->setIfExists('listing_id', $data ?? [], null);
        $this->setIfExists('listing_number', $data ?? [], null);
        $this->setIfExists('listing_source', $data ?? [], null);
        $this->setIfExists('listing_unit', $data ?? [], null);
        $this->setIfExists('ipm_name', $data ?? [], null);
        $this->setIfExists('unit_configurations', $data ?? [], null);
        $this->setIfExists('free_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets registry_number
     *
     * @return string|null
     */
    public function getRegistryNumber()
    {
        return $this->container['registry_number'];
    }

    /**
     * Sets registry_number
     *
     * @param string|null $registry_number The property's registry number required by some jurisdictions.
     *
     * @return self
     */
    public function setRegistryNumber($registry_number)
    {
        if (is_null($registry_number)) {
            throw new \InvalidArgumentException('non-nullable registry_number cannot be null');
        }
        $this->container['registry_number'] = $registry_number;

        return $this;
    }

    /**
     * Gets private_host
     *
     * @return bool|null
     */
    public function getPrivateHost()
    {
        return $this->container['private_host'];
    }

    /**
     * Sets private_host
     *
     * @param bool|null $private_host Indicates if a property has a private host.
     *
     * @return self
     */
    public function setPrivateHost($private_host)
    {
        if (is_null($private_host)) {
            throw new \InvalidArgumentException('non-nullable private_host cannot be null');
        }
        $this->container['private_host'] = $private_host;

        return $this;
    }

    /**
     * Gets property_manager
     *
     * @return \OpenAPI\Client\Model\PropertyManager|null
     */
    public function getPropertyManager()
    {
        return $this->container['property_manager'];
    }

    /**
     * Sets property_manager
     *
     * @param \OpenAPI\Client\Model\PropertyManager|null $property_manager property_manager
     *
     * @return self
     */
    public function setPropertyManager($property_manager)
    {
        if (is_null($property_manager)) {
            throw new \InvalidArgumentException('non-nullable property_manager cannot be null');
        }
        $this->container['property_manager'] = $property_manager;

        return $this;
    }

    /**
     * Gets rental_agreement
     *
     * @return \OpenAPI\Client\Model\RentalAgreement|null
     */
    public function getRentalAgreement()
    {
        return $this->container['rental_agreement'];
    }

    /**
     * Sets rental_agreement
     *
     * @param \OpenAPI\Client\Model\RentalAgreement|null $rental_agreement rental_agreement
     *
     * @return self
     */
    public function setRentalAgreement($rental_agreement)
    {
        if (is_null($rental_agreement)) {
            throw new \InvalidArgumentException('non-nullable rental_agreement cannot be null');
        }
        $this->container['rental_agreement'] = $rental_agreement;

        return $this;
    }

    /**
     * Gets house_rules
     *
     * @return string[]|null
     */
    public function getHouseRules()
    {
        return $this->container['house_rules'];
    }

    /**
     * Sets house_rules
     *
     * @param string[]|null $house_rules List of strings detailing house rules.
     *
     * @return self
     */
    public function setHouseRules($house_rules)
    {
        if (is_null($house_rules)) {
            throw new \InvalidArgumentException('non-nullable house_rules cannot be null');
        }
        $this->container['house_rules'] = $house_rules;

        return $this;
    }

    /**
     * Gets enhanced_house_rules
     *
     * @return array<string,\OpenAPI\Client\Model\EnhancedHouseRules>|null
     */
    public function getEnhancedHouseRules()
    {
        return $this->container['enhanced_house_rules'];
    }

    /**
     * Sets enhanced_house_rules
     *
     * @param array<string,\OpenAPI\Client\Model\EnhancedHouseRules>|null $enhanced_house_rules Map of enhanced house rules.
     *
     * @return self
     */
    public function setEnhancedHouseRules($enhanced_house_rules)
    {
        if (is_null($enhanced_house_rules)) {
            throw new \InvalidArgumentException('non-nullable enhanced_house_rules cannot be null');
        }
        $this->container['enhanced_house_rules'] = $enhanced_house_rules;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return \OpenAPI\Client\Model\Amenity|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param \OpenAPI\Client\Model\Amenity|null $amenities amenities
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets vrbo_srp_id
     *
     * @return string|null
     */
    public function getVrboSrpId()
    {
        return $this->container['vrbo_srp_id'];
    }

    /**
     * Sets vrbo_srp_id
     *
     * @param string|null $vrbo_srp_id The Vrbo srp needed for link-off.
     *
     * @return self
     */
    public function setVrboSrpId($vrbo_srp_id)
    {
        if (is_null($vrbo_srp_id)) {
            throw new \InvalidArgumentException('non-nullable vrbo_srp_id cannot be null');
        }
        $this->container['vrbo_srp_id'] = $vrbo_srp_id;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return string|null
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param string|null $listing_id The listing id for a Vrbo property.
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        if (is_null($listing_id)) {
            throw new \InvalidArgumentException('non-nullable listing_id cannot be null');
        }
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets listing_number
     *
     * @return string|null
     */
    public function getListingNumber()
    {
        return $this->container['listing_number'];
    }

    /**
     * Sets listing_number
     *
     * @param string|null $listing_number The listing number for a Vrbo property.
     *
     * @return self
     */
    public function setListingNumber($listing_number)
    {
        if (is_null($listing_number)) {
            throw new \InvalidArgumentException('non-nullable listing_number cannot be null');
        }
        $this->container['listing_number'] = $listing_number;

        return $this;
    }

    /**
     * Gets listing_source
     *
     * @return string|null
     */
    public function getListingSource()
    {
        return $this->container['listing_source'];
    }

    /**
     * Sets listing_source
     *
     * @param string|null $listing_source The listing source.
     *
     * @return self
     */
    public function setListingSource($listing_source)
    {
        if (is_null($listing_source)) {
            throw new \InvalidArgumentException('non-nullable listing_source cannot be null');
        }
        $this->container['listing_source'] = $listing_source;

        return $this;
    }

    /**
     * Gets listing_unit
     *
     * @return string|null
     */
    public function getListingUnit()
    {
        return $this->container['listing_unit'];
    }

    /**
     * Sets listing_unit
     *
     * @param string|null $listing_unit The specific unit.
     *
     * @return self
     */
    public function setListingUnit($listing_unit)
    {
        if (is_null($listing_unit)) {
            throw new \InvalidArgumentException('non-nullable listing_unit cannot be null');
        }
        $this->container['listing_unit'] = $listing_unit;

        return $this;
    }

    /**
     * Gets ipm_name
     *
     * @return string|null
     */
    public function getIpmName()
    {
        return $this->container['ipm_name'];
    }

    /**
     * Sets ipm_name
     *
     * @param string|null $ipm_name The name of the IPM used to build guest messaging to inform travelers of the name of the IPM who will charge their card and/or send them a confirmation email.
     *
     * @return self
     */
    public function setIpmName($ipm_name)
    {
        if (is_null($ipm_name)) {
            throw new \InvalidArgumentException('non-nullable ipm_name cannot be null');
        }
        $this->container['ipm_name'] = $ipm_name;

        return $this;
    }

    /**
     * Gets unit_configurations
     *
     * @return array<string,\OpenAPI\Client\Model\UnitConfiguration[]>|null
     */
    public function getUnitConfigurations()
    {
        return $this->container['unit_configurations'];
    }

    /**
     * Sets unit_configurations
     *
     * @param array<string,\OpenAPI\Client\Model\UnitConfiguration[]>|null $unit_configurations Map of the vacation rental unit configurations. The key value is the unit location.
     *
     * @return self
     */
    public function setUnitConfigurations($unit_configurations)
    {
        if (is_null($unit_configurations)) {
            throw new \InvalidArgumentException('non-nullable unit_configurations cannot be null');
        }
        $this->container['unit_configurations'] = $unit_configurations;

        return $this;
    }

    /**
     * Gets free_text
     *
     * @return string|null
     */
    public function getFreeText()
    {
        return $this->container['free_text'];
    }

    /**
     * Sets free_text
     *
     * @param string|null $free_text A free text description that could contain significantly unstructured information that could impact the booking and should be displayed to customers. This field could contain html break tags `<br>` that may make display challenging.
     *
     * @return self
     */
    public function setFreeText($free_text)
    {
        if (is_null($free_text)) {
            throw new \InvalidArgumentException('non-nullable free_text cannot be null');
        }
        $this->container['free_text'] = $free_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



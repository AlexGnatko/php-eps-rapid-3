<?php
/**
 * PropertyContent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PropertyContent Class Doc Comment
 *
 * @category Class
 * @description An individual property object in the map of property objects.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PropertyContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PropertyContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => 'string',
        'name' => 'string',
        'address' => '\OpenAPI\Client\Model\Address',
        'ratings' => '\OpenAPI\Client\Model\Ratings',
        'location' => '\OpenAPI\Client\Model\Location',
        'phone' => 'string',
        'fax' => 'string',
        'category' => '\OpenAPI\Client\Model\CategoryProperty',
        'business_model' => '\OpenAPI\Client\Model\BusinessModel',
        'rank' => 'float',
        'checkin' => '\OpenAPI\Client\Model\Checkin',
        'checkout' => '\OpenAPI\Client\Model\Checkout',
        'fees' => '\OpenAPI\Client\Model\Fees',
        'policies' => '\OpenAPI\Client\Model\Policies',
        'attributes' => '\OpenAPI\Client\Model\Attributes',
        'amenities' => 'array<string,\OpenAPI\Client\Model\Amenity>',
        'images' => '\OpenAPI\Client\Model\Image[]',
        'onsite_payments' => '\OpenAPI\Client\Model\OnsitePayments',
        'rooms' => 'array<string,\OpenAPI\Client\Model\RoomContent>',
        'rates' => 'array<string,\OpenAPI\Client\Model\RateContent>',
        'dates' => '\OpenAPI\Client\Model\Dates',
        'descriptions' => '\OpenAPI\Client\Model\Descriptions',
        'statistics' => 'array<string,\OpenAPI\Client\Model\Statistic>',
        'airports' => '\OpenAPI\Client\Model\AssociatedAirports',
        'themes' => 'array<string,\OpenAPI\Client\Model\Theme>',
        'all_inclusive' => '\OpenAPI\Client\Model\AllInclusive',
        'tax_id' => 'string',
        'chain' => '\OpenAPI\Client\Model\Chain',
        'brand' => '\OpenAPI\Client\Model\Brand',
        'spoken_languages' => 'array<string,\OpenAPI\Client\Model\SpokenLanguage>',
        'multi_unit' => 'bool',
        'payment_registration_recommended' => 'bool',
        'vacation_rental_details' => '\OpenAPI\Client\Model\VacationRentalDetails',
        'supply_source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'property_id' => null,
        'name' => null,
        'address' => null,
        'ratings' => null,
        'location' => null,
        'phone' => null,
        'fax' => null,
        'category' => null,
        'business_model' => null,
        'rank' => null,
        'checkin' => null,
        'checkout' => null,
        'fees' => null,
        'policies' => null,
        'attributes' => null,
        'amenities' => null,
        'images' => null,
        'onsite_payments' => null,
        'rooms' => null,
        'rates' => null,
        'dates' => null,
        'descriptions' => null,
        'statistics' => null,
        'airports' => null,
        'themes' => null,
        'all_inclusive' => null,
        'tax_id' => null,
        'chain' => null,
        'brand' => null,
        'spoken_languages' => null,
        'multi_unit' => null,
        'payment_registration_recommended' => null,
        'vacation_rental_details' => null,
        'supply_source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'property_id' => false,
		'name' => false,
		'address' => false,
		'ratings' => false,
		'location' => false,
		'phone' => false,
		'fax' => false,
		'category' => false,
		'business_model' => false,
		'rank' => false,
		'checkin' => false,
		'checkout' => false,
		'fees' => false,
		'policies' => false,
		'attributes' => false,
		'amenities' => false,
		'images' => false,
		'onsite_payments' => false,
		'rooms' => false,
		'rates' => false,
		'dates' => false,
		'descriptions' => false,
		'statistics' => false,
		'airports' => false,
		'themes' => false,
		'all_inclusive' => false,
		'tax_id' => false,
		'chain' => false,
		'brand' => false,
		'spoken_languages' => false,
		'multi_unit' => false,
		'payment_registration_recommended' => false,
		'vacation_rental_details' => false,
		'supply_source' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'property_id',
        'name' => 'name',
        'address' => 'address',
        'ratings' => 'ratings',
        'location' => 'location',
        'phone' => 'phone',
        'fax' => 'fax',
        'category' => 'category',
        'business_model' => 'business_model',
        'rank' => 'rank',
        'checkin' => 'checkin',
        'checkout' => 'checkout',
        'fees' => 'fees',
        'policies' => 'policies',
        'attributes' => 'attributes',
        'amenities' => 'amenities',
        'images' => 'images',
        'onsite_payments' => 'onsite_payments',
        'rooms' => 'rooms',
        'rates' => 'rates',
        'dates' => 'dates',
        'descriptions' => 'descriptions',
        'statistics' => 'statistics',
        'airports' => 'airports',
        'themes' => 'themes',
        'all_inclusive' => 'all_inclusive',
        'tax_id' => 'tax_id',
        'chain' => 'chain',
        'brand' => 'brand',
        'spoken_languages' => 'spoken_languages',
        'multi_unit' => 'multi_unit',
        'payment_registration_recommended' => 'payment_registration_recommended',
        'vacation_rental_details' => 'vacation_rental_details',
        'supply_source' => 'supply_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'name' => 'setName',
        'address' => 'setAddress',
        'ratings' => 'setRatings',
        'location' => 'setLocation',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'category' => 'setCategory',
        'business_model' => 'setBusinessModel',
        'rank' => 'setRank',
        'checkin' => 'setCheckin',
        'checkout' => 'setCheckout',
        'fees' => 'setFees',
        'policies' => 'setPolicies',
        'attributes' => 'setAttributes',
        'amenities' => 'setAmenities',
        'images' => 'setImages',
        'onsite_payments' => 'setOnsitePayments',
        'rooms' => 'setRooms',
        'rates' => 'setRates',
        'dates' => 'setDates',
        'descriptions' => 'setDescriptions',
        'statistics' => 'setStatistics',
        'airports' => 'setAirports',
        'themes' => 'setThemes',
        'all_inclusive' => 'setAllInclusive',
        'tax_id' => 'setTaxId',
        'chain' => 'setChain',
        'brand' => 'setBrand',
        'spoken_languages' => 'setSpokenLanguages',
        'multi_unit' => 'setMultiUnit',
        'payment_registration_recommended' => 'setPaymentRegistrationRecommended',
        'vacation_rental_details' => 'setVacationRentalDetails',
        'supply_source' => 'setSupplySource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'name' => 'getName',
        'address' => 'getAddress',
        'ratings' => 'getRatings',
        'location' => 'getLocation',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'category' => 'getCategory',
        'business_model' => 'getBusinessModel',
        'rank' => 'getRank',
        'checkin' => 'getCheckin',
        'checkout' => 'getCheckout',
        'fees' => 'getFees',
        'policies' => 'getPolicies',
        'attributes' => 'getAttributes',
        'amenities' => 'getAmenities',
        'images' => 'getImages',
        'onsite_payments' => 'getOnsitePayments',
        'rooms' => 'getRooms',
        'rates' => 'getRates',
        'dates' => 'getDates',
        'descriptions' => 'getDescriptions',
        'statistics' => 'getStatistics',
        'airports' => 'getAirports',
        'themes' => 'getThemes',
        'all_inclusive' => 'getAllInclusive',
        'tax_id' => 'getTaxId',
        'chain' => 'getChain',
        'brand' => 'getBrand',
        'spoken_languages' => 'getSpokenLanguages',
        'multi_unit' => 'getMultiUnit',
        'payment_registration_recommended' => 'getPaymentRegistrationRecommended',
        'vacation_rental_details' => 'getVacationRentalDetails',
        'supply_source' => 'getSupplySource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('property_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('ratings', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('business_model', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('checkin', $data ?? [], null);
        $this->setIfExists('checkout', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('policies', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('amenities', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('onsite_payments', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('rates', $data ?? [], null);
        $this->setIfExists('dates', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('statistics', $data ?? [], null);
        $this->setIfExists('airports', $data ?? [], null);
        $this->setIfExists('themes', $data ?? [], null);
        $this->setIfExists('all_inclusive', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('chain', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('spoken_languages', $data ?? [], null);
        $this->setIfExists('multi_unit', $data ?? [], null);
        $this->setIfExists('payment_registration_recommended', $data ?? [], null);
        $this->setIfExists('vacation_rental_details', $data ?? [], null);
        $this->setIfExists('supply_source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return string|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param string|null $property_id Unique Expedia property ID.
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {
        if (is_null($property_id)) {
            throw new \InvalidArgumentException('non-nullable property_id cannot be null');
        }
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Property name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets ratings
     *
     * @return \OpenAPI\Client\Model\Ratings|null
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     *
     * @param \OpenAPI\Client\Model\Ratings|null $ratings ratings
     *
     * @return self
     */
    public function setRatings($ratings)
    {
        if (is_null($ratings)) {
            throw new \InvalidArgumentException('non-nullable ratings cannot be null');
        }
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The property's phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax The property's fax number.
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\CategoryProperty|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\CategoryProperty|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets business_model
     *
     * @return \OpenAPI\Client\Model\BusinessModel|null
     */
    public function getBusinessModel()
    {
        return $this->container['business_model'];
    }

    /**
     * Sets business_model
     *
     * @param \OpenAPI\Client\Model\BusinessModel|null $business_model business_model
     *
     * @return self
     */
    public function setBusinessModel($business_model)
    {
        if (is_null($business_model)) {
            throw new \InvalidArgumentException('non-nullable business_model cannot be null');
        }
        $this->container['business_model'] = $business_model;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return float|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param float|null $rank The property’s rank across all properties. This value sorts properties based on EPS transactional data and details about the property, with 1 indicating the best-performing property and others following in ascending numerical order.
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets checkin
     *
     * @return \OpenAPI\Client\Model\Checkin|null
     */
    public function getCheckin()
    {
        return $this->container['checkin'];
    }

    /**
     * Sets checkin
     *
     * @param \OpenAPI\Client\Model\Checkin|null $checkin checkin
     *
     * @return self
     */
    public function setCheckin($checkin)
    {
        if (is_null($checkin)) {
            throw new \InvalidArgumentException('non-nullable checkin cannot be null');
        }
        $this->container['checkin'] = $checkin;

        return $this;
    }

    /**
     * Gets checkout
     *
     * @return \OpenAPI\Client\Model\Checkout|null
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     *
     * @param \OpenAPI\Client\Model\Checkout|null $checkout checkout
     *
     * @return self
     */
    public function setCheckout($checkout)
    {
        if (is_null($checkout)) {
            throw new \InvalidArgumentException('non-nullable checkout cannot be null');
        }
        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\Fees|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\Fees|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets policies
     *
     * @return \OpenAPI\Client\Model\Policies|null
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     *
     * @param \OpenAPI\Client\Model\Policies|null $policies policies
     *
     * @return self
     */
    public function setPolicies($policies)
    {
        if (is_null($policies)) {
            throw new \InvalidArgumentException('non-nullable policies cannot be null');
        }
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\Attributes|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\Attributes|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return array<string,\OpenAPI\Client\Model\Amenity>|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param array<string,\OpenAPI\Client\Model\Amenity>|null $amenities Lists all of the amenities available for all guests at the property. See our [amenities reference](https://developers.expediagroup.com/docs/rapid/lodging/content/content-reference-lists) for current known amenity ID and name values.
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        if (is_null($amenities)) {
            throw new \InvalidArgumentException('non-nullable amenities cannot be null');
        }
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\Image[]|null $images Contains all property images available.
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets onsite_payments
     *
     * @return \OpenAPI\Client\Model\OnsitePayments|null
     */
    public function getOnsitePayments()
    {
        return $this->container['onsite_payments'];
    }

    /**
     * Sets onsite_payments
     *
     * @param \OpenAPI\Client\Model\OnsitePayments|null $onsite_payments onsite_payments
     *
     * @return self
     */
    public function setOnsitePayments($onsite_payments)
    {
        if (is_null($onsite_payments)) {
            throw new \InvalidArgumentException('non-nullable onsite_payments cannot be null');
        }
        $this->container['onsite_payments'] = $onsite_payments;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return array<string,\OpenAPI\Client\Model\RoomContent>|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param array<string,\OpenAPI\Client\Model\RoomContent>|null $rooms Information about all of the rooms at the property.
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return array<string,\OpenAPI\Client\Model\RateContent>|null
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param array<string,\OpenAPI\Client\Model\RateContent>|null $rates Additional information about the rates offered by the property. This should be used in conjunction with the pricing and other rate-related information in shopping.
     *
     * @return self
     */
    public function setRates($rates)
    {
        if (is_null($rates)) {
            throw new \InvalidArgumentException('non-nullable rates cannot be null');
        }
        $this->container['rates'] = $rates;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \OpenAPI\Client\Model\Dates|null
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \OpenAPI\Client\Model\Dates|null $dates dates
     *
     * @return self
     */
    public function setDates($dates)
    {
        if (is_null($dates)) {
            throw new \InvalidArgumentException('non-nullable dates cannot be null');
        }
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \OpenAPI\Client\Model\Descriptions|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \OpenAPI\Client\Model\Descriptions|null $descriptions descriptions
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        if (is_null($descriptions)) {
            throw new \InvalidArgumentException('non-nullable descriptions cannot be null');
        }
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return array<string,\OpenAPI\Client\Model\Statistic>|null
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param array<string,\OpenAPI\Client\Model\Statistic>|null $statistics Statistics of the property, such as number of floors. See our [statistics reference](https://developers.expediagroup.com/docs/rapid/lodging/content/content-reference-lists) for current known statistics ID and name values.
     *
     * @return self
     */
    public function setStatistics($statistics)
    {
        if (is_null($statistics)) {
            throw new \InvalidArgumentException('non-nullable statistics cannot be null');
        }
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets airports
     *
     * @return \OpenAPI\Client\Model\AssociatedAirports|null
     */
    public function getAirports()
    {
        return $this->container['airports'];
    }

    /**
     * Sets airports
     *
     * @param \OpenAPI\Client\Model\AssociatedAirports|null $airports airports
     *
     * @return self
     */
    public function setAirports($airports)
    {
        if (is_null($airports)) {
            throw new \InvalidArgumentException('non-nullable airports cannot be null');
        }
        $this->container['airports'] = $airports;

        return $this;
    }

    /**
     * Gets themes
     *
     * @return array<string,\OpenAPI\Client\Model\Theme>|null
     */
    public function getThemes()
    {
        return $this->container['themes'];
    }

    /**
     * Sets themes
     *
     * @param array<string,\OpenAPI\Client\Model\Theme>|null $themes Themes that describe the property. See our [themes reference](https://developers.expediagroup.com/docs/rapid/lodging/content/content-reference-lists) for current known theme ID and name values.
     *
     * @return self
     */
    public function setThemes($themes)
    {
        if (is_null($themes)) {
            throw new \InvalidArgumentException('non-nullable themes cannot be null');
        }
        $this->container['themes'] = $themes;

        return $this;
    }

    /**
     * Gets all_inclusive
     *
     * @return \OpenAPI\Client\Model\AllInclusive|null
     */
    public function getAllInclusive()
    {
        return $this->container['all_inclusive'];
    }

    /**
     * Sets all_inclusive
     *
     * @param \OpenAPI\Client\Model\AllInclusive|null $all_inclusive all_inclusive
     *
     * @return self
     */
    public function setAllInclusive($all_inclusive)
    {
        if (is_null($all_inclusive)) {
            throw new \InvalidArgumentException('non-nullable all_inclusive cannot be null');
        }
        $this->container['all_inclusive'] = $all_inclusive;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id Tax ID.
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets chain
     *
     * @return \OpenAPI\Client\Model\Chain|null
     */
    public function getChain()
    {
        return $this->container['chain'];
    }

    /**
     * Sets chain
     *
     * @param \OpenAPI\Client\Model\Chain|null $chain chain
     *
     * @return self
     */
    public function setChain($chain)
    {
        if (is_null($chain)) {
            throw new \InvalidArgumentException('non-nullable chain cannot be null');
        }
        $this->container['chain'] = $chain;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return \OpenAPI\Client\Model\Brand|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param \OpenAPI\Client\Model\Brand|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return array<string,\OpenAPI\Client\Model\SpokenLanguage>|null
     */
    public function getSpokenLanguages()
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param array<string,\OpenAPI\Client\Model\SpokenLanguage>|null $spoken_languages Languages spoken at the property.
     *
     * @return self
     */
    public function setSpokenLanguages($spoken_languages)
    {
        if (is_null($spoken_languages)) {
            throw new \InvalidArgumentException('non-nullable spoken_languages cannot be null');
        }
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets multi_unit
     *
     * @return bool|null
     */
    public function getMultiUnit()
    {
        return $this->container['multi_unit'];
    }

    /**
     * Sets multi_unit
     *
     * @param bool|null $multi_unit Boolean value indicating if a property is a multi-unit property.
     *
     * @return self
     */
    public function setMultiUnit($multi_unit)
    {
        if (is_null($multi_unit)) {
            throw new \InvalidArgumentException('non-nullable multi_unit cannot be null');
        }
        $this->container['multi_unit'] = $multi_unit;

        return $this;
    }

    /**
     * Gets payment_registration_recommended
     *
     * @return bool|null
     */
    public function getPaymentRegistrationRecommended()
    {
        return $this->container['payment_registration_recommended'];
    }

    /**
     * Sets payment_registration_recommended
     *
     * @param bool|null $payment_registration_recommended Boolean value indicating if a property may require payment registration to process payments, even when using the property_collect Business Model. If true, then a property may not be successfully bookable without registering payments first.
     *
     * @return self
     */
    public function setPaymentRegistrationRecommended($payment_registration_recommended)
    {
        if (is_null($payment_registration_recommended)) {
            throw new \InvalidArgumentException('non-nullable payment_registration_recommended cannot be null');
        }
        $this->container['payment_registration_recommended'] = $payment_registration_recommended;

        return $this;
    }

    /**
     * Gets vacation_rental_details
     *
     * @return \OpenAPI\Client\Model\VacationRentalDetails|null
     */
    public function getVacationRentalDetails()
    {
        return $this->container['vacation_rental_details'];
    }

    /**
     * Sets vacation_rental_details
     *
     * @param \OpenAPI\Client\Model\VacationRentalDetails|null $vacation_rental_details vacation_rental_details
     *
     * @return self
     */
    public function setVacationRentalDetails($vacation_rental_details)
    {
        if (is_null($vacation_rental_details)) {
            throw new \InvalidArgumentException('non-nullable vacation_rental_details cannot be null');
        }
        $this->container['vacation_rental_details'] = $vacation_rental_details;

        return $this;
    }

    /**
     * Gets supply_source
     *
     * @return string|null
     */
    public function getSupplySource()
    {
        return $this->container['supply_source'];
    }

    /**
     * Sets supply_source
     *
     * @param string|null $supply_source The supply source of the property.
     *
     * @return self
     */
    public function setSupplySource($supply_source)
    {
        if (is_null($supply_source)) {
            throw new \InvalidArgumentException('non-nullable supply_source cannot be null');
        }
        $this->container['supply_source'] = $supply_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



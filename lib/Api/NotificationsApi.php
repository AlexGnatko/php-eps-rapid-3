<?php
/**
 * NotificationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'requestTestNotification' => [
            'application/json',
        ],
        'requestUndeliveredNotifications' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation requestTestNotification
     *
     * Request Test Notification
     *
     * @param  \OpenAPI\Client\Model\TestNotificationRequest $test_notification_request test_notification_request (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTestNotification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function requestTestNotification($test_notification_request, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestTestNotification'][0])
    {
        $this->requestTestNotificationWithHttpInfo($test_notification_request, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);
    }

    /**
     * Operation requestTestNotificationWithHttpInfo
     *
     * Request Test Notification
     *
     * @param  \OpenAPI\Client\Model\TestNotificationRequest $test_notification_request (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTestNotification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestTestNotificationWithHttpInfo($test_notification_request, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestTestNotification'][0])
    {
        $request = $this->requestTestNotificationRequest($test_notification_request, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestTestNotificationAsync
     *
     * Request Test Notification
     *
     * @param  \OpenAPI\Client\Model\TestNotificationRequest $test_notification_request (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTestNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestTestNotificationAsync($test_notification_request, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestTestNotification'][0])
    {
        return $this->requestTestNotificationAsyncWithHttpInfo($test_notification_request, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestTestNotificationAsyncWithHttpInfo
     *
     * Request Test Notification
     *
     * @param  \OpenAPI\Client\Model\TestNotificationRequest $test_notification_request (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTestNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestTestNotificationAsyncWithHttpInfo($test_notification_request, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestTestNotification'][0])
    {
        $returnType = '';
        $request = $this->requestTestNotificationRequest($test_notification_request, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestTestNotification'
     *
     * @param  \OpenAPI\Client\Model\TestNotificationRequest $test_notification_request (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTestNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestTestNotificationRequest($test_notification_request, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestTestNotification'][0])
    {

        // verify the required parameter 'test_notification_request' is set
        if ($test_notification_request === null || (is_array($test_notification_request) && count($test_notification_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test_notification_request when calling requestTestNotification'
            );
        }






        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing_terms,
            'billing_terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partner_point_of_sale,
            'partner_point_of_sale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_terms,
            'payment_terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform_name,
            'platform_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($test_notification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($test_notification_request));
            } else {
                $httpBody = $test_notification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestUndeliveredNotifications
     *
     * Request Undelivered Notifications
     *
     * @param  bool $undeliverable Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;. (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestUndeliveredNotifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Notification[]
     */
    public function requestUndeliveredNotifications($undeliverable, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestUndeliveredNotifications'][0])
    {
        list($response) = $this->requestUndeliveredNotificationsWithHttpInfo($undeliverable, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);
        return $response;
    }

    /**
     * Operation requestUndeliveredNotificationsWithHttpInfo
     *
     * Request Undelivered Notifications
     *
     * @param  bool $undeliverable Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;. (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestUndeliveredNotifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Notification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function requestUndeliveredNotificationsWithHttpInfo($undeliverable, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestUndeliveredNotifications'][0])
    {
        $request = $this->requestUndeliveredNotificationsRequest($undeliverable, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Notification[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Notification[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Notification[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Notification[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Notification[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestUndeliveredNotificationsAsync
     *
     * Request Undelivered Notifications
     *
     * @param  bool $undeliverable Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;. (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestUndeliveredNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestUndeliveredNotificationsAsync($undeliverable, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestUndeliveredNotifications'][0])
    {
        return $this->requestUndeliveredNotificationsAsyncWithHttpInfo($undeliverable, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestUndeliveredNotificationsAsyncWithHttpInfo
     *
     * Request Undelivered Notifications
     *
     * @param  bool $undeliverable Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;. (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestUndeliveredNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestUndeliveredNotificationsAsyncWithHttpInfo($undeliverable, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestUndeliveredNotifications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Notification[]';
        $request = $this->requestUndeliveredNotificationsRequest($undeliverable, $billing_terms, $partner_point_of_sale, $payment_terms, $platform_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestUndeliveredNotifications'
     *
     * @param  bool $undeliverable Undeliverable notifications are returned when this parameter is set to &#x60;true&#x60;. (required)
     * @param  string $billing_terms This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $partner_point_of_sale This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $payment_terms This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $platform_name This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestUndeliveredNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestUndeliveredNotificationsRequest($undeliverable, $billing_terms = null, $partner_point_of_sale = null, $payment_terms = null, $platform_name = null, string $contentType = self::contentTypes['requestUndeliveredNotifications'][0])
    {

        // verify the required parameter 'undeliverable' is set
        if ($undeliverable === null || (is_array($undeliverable) && count($undeliverable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $undeliverable when calling requestUndeliveredNotifications'
            );
        }






        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $undeliverable,
            'undeliverable', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing_terms,
            'billing_terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partner_point_of_sale,
            'partner_point_of_sale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_terms,
            'payment_terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform_name,
            'platform_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * PaymentSessionsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentSessionsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSessionsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSessionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'browser_accept_header' => 'string',
        'encoded_browser_metadata' => 'string',
        'preferred_challenge_window_size' => 'string',
        'merchant_url' => 'string',
        'customer_account_details' => '\OpenAPI\Client\Model\PaymentSessionsRequestCustomerAccountDetails',
        'payments' => '\OpenAPI\Client\Model\PaymentRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'browser_accept_header' => null,
        'encoded_browser_metadata' => null,
        'preferred_challenge_window_size' => null,
        'merchant_url' => null,
        'customer_account_details' => null,
        'payments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
		'browser_accept_header' => false,
		'encoded_browser_metadata' => false,
		'preferred_challenge_window_size' => false,
		'merchant_url' => false,
		'customer_account_details' => false,
		'payments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'browser_accept_header' => 'browser_accept_header',
        'encoded_browser_metadata' => 'encoded_browser_metadata',
        'preferred_challenge_window_size' => 'preferred_challenge_window_size',
        'merchant_url' => 'merchant_url',
        'customer_account_details' => 'customer_account_details',
        'payments' => 'payments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'browser_accept_header' => 'setBrowserAcceptHeader',
        'encoded_browser_metadata' => 'setEncodedBrowserMetadata',
        'preferred_challenge_window_size' => 'setPreferredChallengeWindowSize',
        'merchant_url' => 'setMerchantUrl',
        'customer_account_details' => 'setCustomerAccountDetails',
        'payments' => 'setPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'browser_accept_header' => 'getBrowserAcceptHeader',
        'encoded_browser_metadata' => 'getEncodedBrowserMetadata',
        'preferred_challenge_window_size' => 'getPreferredChallengeWindowSize',
        'merchant_url' => 'getMerchantUrl',
        'customer_account_details' => 'getCustomerAccountDetails',
        'payments' => 'getPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PREFERRED_CHALLENGE_WINDOW_SIZE_EXTRA_SMALL = 'extra_small';
    public const PREFERRED_CHALLENGE_WINDOW_SIZE_SMALL = 'small';
    public const PREFERRED_CHALLENGE_WINDOW_SIZE_MEDIUM = 'medium';
    public const PREFERRED_CHALLENGE_WINDOW_SIZE_LARGE = 'large';
    public const PREFERRED_CHALLENGE_WINDOW_SIZE_FULL_SCREEN = 'full_screen';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreferredChallengeWindowSizeAllowableValues()
    {
        return [
            self::PREFERRED_CHALLENGE_WINDOW_SIZE_EXTRA_SMALL,
            self::PREFERRED_CHALLENGE_WINDOW_SIZE_SMALL,
            self::PREFERRED_CHALLENGE_WINDOW_SIZE_MEDIUM,
            self::PREFERRED_CHALLENGE_WINDOW_SIZE_LARGE,
            self::PREFERRED_CHALLENGE_WINDOW_SIZE_FULL_SCREEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('browser_accept_header', $data ?? [], null);
        $this->setIfExists('encoded_browser_metadata', $data ?? [], null);
        $this->setIfExists('preferred_challenge_window_size', $data ?? [], null);
        $this->setIfExists('merchant_url', $data ?? [], null);
        $this->setIfExists('customer_account_details', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['browser_accept_header'] === null) {
            $invalidProperties[] = "'browser_accept_header' can't be null";
        }
        if ($this->container['encoded_browser_metadata'] === null) {
            $invalidProperties[] = "'encoded_browser_metadata' can't be null";
        }
        if ($this->container['preferred_challenge_window_size'] === null) {
            $invalidProperties[] = "'preferred_challenge_window_size' can't be null";
        }
        $allowedValues = $this->getPreferredChallengeWindowSizeAllowableValues();
        if (!is_null($this->container['preferred_challenge_window_size']) && !in_array($this->container['preferred_challenge_window_size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preferred_challenge_window_size', must be one of '%s'",
                $this->container['preferred_challenge_window_size'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant_url'] === null) {
            $invalidProperties[] = "'merchant_url' can't be null";
        }
        if ($this->container['customer_account_details'] === null) {
            $invalidProperties[] = "'customer_account_details' can't be null";
        }
        if ($this->container['payments'] === null) {
            $invalidProperties[] = "'payments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The version of the EgPayments.js library.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets browser_accept_header
     *
     * @return string
     */
    public function getBrowserAcceptHeader()
    {
        return $this->container['browser_accept_header'];
    }

    /**
     * Sets browser_accept_header
     *
     * @param string $browser_accept_header The customer's browser accept header that was used in the booking request.
     *
     * @return self
     */
    public function setBrowserAcceptHeader($browser_accept_header)
    {
        if (is_null($browser_accept_header)) {
            throw new \InvalidArgumentException('non-nullable browser_accept_header cannot be null');
        }
        $this->container['browser_accept_header'] = $browser_accept_header;

        return $this;
    }

    /**
     * Gets encoded_browser_metadata
     *
     * @return string
     */
    public function getEncodedBrowserMetadata()
    {
        return $this->container['encoded_browser_metadata'];
    }

    /**
     * Sets encoded_browser_metadata
     *
     * @param string $encoded_browser_metadata Encoded browser metadata, provided by the EgPayments.js library.
     *
     * @return self
     */
    public function setEncodedBrowserMetadata($encoded_browser_metadata)
    {
        if (is_null($encoded_browser_metadata)) {
            throw new \InvalidArgumentException('non-nullable encoded_browser_metadata cannot be null');
        }
        $this->container['encoded_browser_metadata'] = $encoded_browser_metadata;

        return $this;
    }

    /**
     * Gets preferred_challenge_window_size
     *
     * @return string
     */
    public function getPreferredChallengeWindowSize()
    {
        return $this->container['preferred_challenge_window_size'];
    }

    /**
     * Sets preferred_challenge_window_size
     *
     * @param string $preferred_challenge_window_size The preferred window size that needs to be displayed to the customer. Following are the possible values of this field:   * `extra_small`: 250 x 400   * `small`: 390 x 400   * `medium`: 600 x 400   * `large`: 500 x 600   * `full_screen`: Full screen
     *
     * @return self
     */
    public function setPreferredChallengeWindowSize($preferred_challenge_window_size)
    {
        if (is_null($preferred_challenge_window_size)) {
            throw new \InvalidArgumentException('non-nullable preferred_challenge_window_size cannot be null');
        }
        $allowedValues = $this->getPreferredChallengeWindowSizeAllowableValues();
        if (!in_array($preferred_challenge_window_size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preferred_challenge_window_size', must be one of '%s'",
                    $preferred_challenge_window_size,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preferred_challenge_window_size'] = $preferred_challenge_window_size;

        return $this;
    }

    /**
     * Gets merchant_url
     *
     * @return string
     */
    public function getMerchantUrl()
    {
        return $this->container['merchant_url'];
    }

    /**
     * Sets merchant_url
     *
     * @param string $merchant_url Fully qualified URL of merchant website or customer care site.
     *
     * @return self
     */
    public function setMerchantUrl($merchant_url)
    {
        if (is_null($merchant_url)) {
            throw new \InvalidArgumentException('non-nullable merchant_url cannot be null');
        }
        $this->container['merchant_url'] = $merchant_url;

        return $this;
    }

    /**
     * Gets customer_account_details
     *
     * @return \OpenAPI\Client\Model\PaymentSessionsRequestCustomerAccountDetails
     */
    public function getCustomerAccountDetails()
    {
        return $this->container['customer_account_details'];
    }

    /**
     * Sets customer_account_details
     *
     * @param \OpenAPI\Client\Model\PaymentSessionsRequestCustomerAccountDetails $customer_account_details customer_account_details
     *
     * @return self
     */
    public function setCustomerAccountDetails($customer_account_details)
    {
        if (is_null($customer_account_details)) {
            throw new \InvalidArgumentException('non-nullable customer_account_details cannot be null');
        }
        $this->container['customer_account_details'] = $customer_account_details;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \OpenAPI\Client\Model\PaymentRequest[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \OpenAPI\Client\Model\PaymentRequest[] $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ManageBookingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ManageBookingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManageBookingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'changeRoomDetails' => [
            'application/json',
        ],
        'commitChange' => [
            'application/json',
        ],
        'deleteHeldBooking' => [
            'application/json',
        ],
        'deleteRoom' => [
            'application/json',
        ],
        'getReservation' => [
            'application/json',
        ],
        'getReservationByItineraryId' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeRoomDetails
     *
     * Change details of a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  \OpenAPI\Client\Model\ChangeRoomDetailsRequest $change_room_details_request The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeRoomDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function changeRoomDetails($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['changeRoomDetails'][0])
    {
        $this->changeRoomDetailsWithHttpInfo($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id, $test, $contentType);
    }

    /**
     * Operation changeRoomDetailsWithHttpInfo
     *
     * Change details of a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  \OpenAPI\Client\Model\ChangeRoomDetailsRequest $change_room_details_request The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeRoomDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeRoomDetailsWithHttpInfo($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['changeRoomDetails'][0])
    {
        $request = $this->changeRoomDetailsRequest($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id, $test, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeRoomDetailsAsync
     *
     * Change details of a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  \OpenAPI\Client\Model\ChangeRoomDetailsRequest $change_room_details_request The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeRoomDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeRoomDetailsAsync($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['changeRoomDetails'][0])
    {
        return $this->changeRoomDetailsAsyncWithHttpInfo($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id, $test, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeRoomDetailsAsyncWithHttpInfo
     *
     * Change details of a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  \OpenAPI\Client\Model\ChangeRoomDetailsRequest $change_room_details_request The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeRoomDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeRoomDetailsAsyncWithHttpInfo($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['changeRoomDetails'][0])
    {
        $returnType = '';
        $request = $this->changeRoomDetailsRequest($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id, $test, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeRoomDetails'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  \OpenAPI\Client\Model\ChangeRoomDetailsRequest $change_room_details_request The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeRoomDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeRoomDetailsRequest($accept, $accept_encoding, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $change_room_details_request, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['changeRoomDetails'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'itinerary_id' is set
        if ($itinerary_id === null || (is_array($itinerary_id) && count($itinerary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itinerary_id when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling changeRoomDetails'
            );
        }

        // verify the required parameter 'change_room_details_request' is set
        if ($change_room_details_request === null || (is_array($change_room_details_request) && count($change_room_details_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_room_details_request when calling changeRoomDetails'
            );
        }




        $resourcePath = '/itineraries/{itinerary_id}/rooms/{room_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }

        // path params
        if ($itinerary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itinerary_id' . '}',
                ObjectSerializer::toPathValue($itinerary_id),
                $resourcePath
            );
        }
        // path params
        if ($room_id !== null) {
            $resourcePath = str_replace(
                '{' . 'room_id' . '}',
                ObjectSerializer::toPathValue($room_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_room_details_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_room_details_request));
            } else {
                $httpBody = $change_room_details_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commitChange
     *
     * Commit a change of itinerary that may require additional payment or refund.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $authorization The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration. Send IPV4 addresses only.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  \OpenAPI\Client\Model\CommitChangeRoomRequestBody $commit_change_room_request_body The request body is required if additional payment is necessary. The body can optionally contain the &#x60;change_reference_id&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitChange'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function commitChange($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, $commit_change_room_request_body = null, string $contentType = self::contentTypes['commitChange'][0])
    {
        $this->commitChangeWithHttpInfo($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $commit_change_room_request_body, $contentType);
    }

    /**
     * Operation commitChangeWithHttpInfo
     *
     * Commit a change of itinerary that may require additional payment or refund.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $authorization The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration. Send IPV4 addresses only.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  \OpenAPI\Client\Model\CommitChangeRoomRequestBody $commit_change_room_request_body The request body is required if additional payment is necessary. The body can optionally contain the &#x60;change_reference_id&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitChange'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function commitChangeWithHttpInfo($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, $commit_change_room_request_body = null, string $contentType = self::contentTypes['commitChange'][0])
    {
        $request = $this->commitChangeRequest($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $commit_change_room_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commitChangeAsync
     *
     * Commit a change of itinerary that may require additional payment or refund.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $authorization The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration. Send IPV4 addresses only.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  \OpenAPI\Client\Model\CommitChangeRoomRequestBody $commit_change_room_request_body The request body is required if additional payment is necessary. The body can optionally contain the &#x60;change_reference_id&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitChangeAsync($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, $commit_change_room_request_body = null, string $contentType = self::contentTypes['commitChange'][0])
    {
        return $this->commitChangeAsyncWithHttpInfo($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $commit_change_room_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commitChangeAsyncWithHttpInfo
     *
     * Commit a change of itinerary that may require additional payment or refund.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $authorization The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration. Send IPV4 addresses only.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  \OpenAPI\Client\Model\CommitChangeRoomRequestBody $commit_change_room_request_body The request body is required if additional payment is necessary. The body can optionally contain the &#x60;change_reference_id&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitChangeAsyncWithHttpInfo($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, $commit_change_room_request_body = null, string $contentType = self::contentTypes['commitChange'][0])
    {
        $returnType = '';
        $request = $this->commitChangeRequest($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $commit_change_room_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commitChange'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $authorization The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
     * @param  string $content_type This parameter is to specify what format the request body is in. The only supported value is application/json. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration. Send IPV4 addresses only.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The change call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; (optional)
     * @param  \OpenAPI\Client\Model\CommitChangeRoomRequestBody $commit_change_room_request_body The request body is required if additional payment is necessary. The body can optionally contain the &#x60;change_reference_id&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commitChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commitChangeRequest($accept, $accept_encoding, $authorization, $content_type, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, $commit_change_room_request_body = null, string $contentType = self::contentTypes['commitChange'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling commitChange'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling commitChange'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling commitChange'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling commitChange'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling commitChange'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling commitChange'
            );
        }

        // verify the required parameter 'itinerary_id' is set
        if ($itinerary_id === null || (is_array($itinerary_id) && count($itinerary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itinerary_id when calling commitChange'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling commitChange'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling commitChange'
            );
        }





        $resourcePath = '/itineraries/{itinerary_id}/rooms/{room_id}/pricing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }

        // path params
        if ($itinerary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itinerary_id' . '}',
                ObjectSerializer::toPathValue($itinerary_id),
                $resourcePath
            );
        }
        // path params
        if ($room_id !== null) {
            $resourcePath = str_replace(
                '{' . 'room_id' . '}',
                ObjectSerializer::toPathValue($room_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($commit_change_room_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($commit_change_room_request_body));
            } else {
                $httpBody = $commit_change_room_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHeldBooking
     *
     * Cancel Held Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test held booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteHeldBooking'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHeldBooking($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteHeldBooking'][0])
    {
        $this->deleteHeldBookingWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id, $test, $contentType);
    }

    /**
     * Operation deleteHeldBookingWithHttpInfo
     *
     * Cancel Held Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test held booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteHeldBooking'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHeldBookingWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteHeldBooking'][0])
    {
        $request = $this->deleteHeldBookingRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id, $test, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHeldBookingAsync
     *
     * Cancel Held Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test held booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteHeldBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHeldBookingAsync($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteHeldBooking'][0])
    {
        return $this->deleteHeldBookingAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id, $test, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHeldBookingAsyncWithHttpInfo
     *
     * Cancel Held Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test held booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteHeldBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHeldBookingAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteHeldBooking'][0])
    {
        $returnType = '';
        $request = $this->deleteHeldBookingRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id, $test, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHeldBooking'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test held booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteHeldBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteHeldBookingRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteHeldBooking'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteHeldBooking'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling deleteHeldBooking'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling deleteHeldBooking'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling deleteHeldBooking'
            );
        }

        // verify the required parameter 'itinerary_id' is set
        if ($itinerary_id === null || (is_array($itinerary_id) && count($itinerary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itinerary_id when calling deleteHeldBooking'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteHeldBooking'
            );
        }




        $resourcePath = '/itineraries/{itinerary_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }

        // path params
        if ($itinerary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itinerary_id' . '}',
                ObjectSerializer::toPathValue($itinerary_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRoom
     *
     * Cancel a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoom'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRoom($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteRoom'][0])
    {
        $this->deleteRoomWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $contentType);
    }

    /**
     * Operation deleteRoomWithHttpInfo
     *
     * Cancel a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoom'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoomWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteRoom'][0])
    {
        $request = $this->deleteRoomRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRoomAsync
     *
     * Cancel a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoomAsync($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteRoom'][0])
    {
        return $this->deleteRoomAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRoomAsyncWithHttpInfo
     *
     * Cancel a room.
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRoomAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteRoom'][0])
    {
        $returnType = '';
        $request = $this->deleteRoomRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id, $test, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRoom'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $room_id Room ID of a property.&lt;br&gt; (required)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The cancel call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;unknown_internal_error&#x60; * &#x60;post_stay_cancel&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoom'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRoomRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $room_id, $token, $customer_session_id = null, $test = null, string $contentType = self::contentTypes['deleteRoom'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteRoom'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling deleteRoom'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling deleteRoom'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling deleteRoom'
            );
        }

        // verify the required parameter 'itinerary_id' is set
        if ($itinerary_id === null || (is_array($itinerary_id) && count($itinerary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itinerary_id when calling deleteRoom'
            );
        }

        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling deleteRoom'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteRoom'
            );
        }




        $resourcePath = '/itineraries/{itinerary_id}/rooms/{room_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }

        // path params
        if ($itinerary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itinerary_id' . '}',
                ObjectSerializer::toPathValue($itinerary_id),
                $resourcePath
            );
        }
        // path params
        if ($room_id !== null) {
            $resourcePath = str_replace(
                '{' . 'room_id' . '}',
                ObjectSerializer::toPathValue($room_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReservation
     *
     * Search for and retrieve Bookings with Affiliate Reference Id
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $affiliate_reference_id The affilliate reference id value. This field supports a maximum of 28 characters. (required)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Itinerary[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getReservation($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id = null, $test = null, $include = null, string $contentType = self::contentTypes['getReservation'][0])
    {
        list($response) = $this->getReservationWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id, $test, $include, $contentType);
        return $response;
    }

    /**
     * Operation getReservationWithHttpInfo
     *
     * Search for and retrieve Bookings with Affiliate Reference Id
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $affiliate_reference_id The affilliate reference id value. This field supports a maximum of 28 characters. (required)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Itinerary[]|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReservationWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id = null, $test = null, $include = null, string $contentType = self::contentTypes['getReservation'][0])
    {
        $request = $this->getReservationRequest($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id, $test, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Itinerary[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Itinerary[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Itinerary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 426:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Itinerary[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Itinerary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReservationAsync
     *
     * Search for and retrieve Bookings with Affiliate Reference Id
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $affiliate_reference_id The affilliate reference id value. This field supports a maximum of 28 characters. (required)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationAsync($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id = null, $test = null, $include = null, string $contentType = self::contentTypes['getReservation'][0])
    {
        return $this->getReservationAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id, $test, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReservationAsyncWithHttpInfo
     *
     * Search for and retrieve Bookings with Affiliate Reference Id
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $affiliate_reference_id The affilliate reference id value. This field supports a maximum of 28 characters. (required)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id = null, $test = null, $include = null, string $contentType = self::contentTypes['getReservation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Itinerary[]';
        $request = $this->getReservationRequest($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id, $test, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReservation'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $affiliate_reference_id The affilliate reference id value. This field supports a maximum of 28 characters. (required)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses with the following keywords:&lt;br&gt; * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReservationRequest($accept, $accept_encoding, $customer_ip, $user_agent, $affiliate_reference_id, $email, $customer_session_id = null, $test = null, $include = null, string $contentType = self::contentTypes['getReservation'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getReservation'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling getReservation'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling getReservation'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling getReservation'
            );
        }

        // verify the required parameter 'affiliate_reference_id' is set
        if ($affiliate_reference_id === null || (is_array($affiliate_reference_id) && count($affiliate_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_reference_id when calling getReservation'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling getReservation'
            );
        }





        $resourcePath = '/itineraries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $affiliate_reference_id,
            'affiliate_reference_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReservationByItineraryId
     *
     * Retrieve Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (optional)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded. (Email is required if the token is not provided the request) &lt;br&gt; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationByItineraryId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Itinerary|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function getReservationByItineraryId($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id = null, $test = null, $token = null, $email = null, $include = null, string $contentType = self::contentTypes['getReservationByItineraryId'][0])
    {
        list($response) = $this->getReservationByItineraryIdWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id, $test, $token, $email, $include, $contentType);
        return $response;
    }

    /**
     * Operation getReservationByItineraryIdWithHttpInfo
     *
     * Retrieve Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (optional)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded. (Email is required if the token is not provided the request) &lt;br&gt; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationByItineraryId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Itinerary|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReservationByItineraryIdWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id = null, $test = null, $token = null, $email = null, $include = null, string $contentType = self::contentTypes['getReservationByItineraryId'][0])
    {
        $request = $this->getReservationByItineraryIdRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id, $test, $token, $email, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Itinerary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Itinerary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Itinerary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 426:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Itinerary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Itinerary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 426:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReservationByItineraryIdAsync
     *
     * Retrieve Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (optional)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded. (Email is required if the token is not provided the request) &lt;br&gt; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationByItineraryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationByItineraryIdAsync($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id = null, $test = null, $token = null, $email = null, $include = null, string $contentType = self::contentTypes['getReservationByItineraryId'][0])
    {
        return $this->getReservationByItineraryIdAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id, $test, $token, $email, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReservationByItineraryIdAsyncWithHttpInfo
     *
     * Retrieve Booking
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (optional)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded. (Email is required if the token is not provided the request) &lt;br&gt; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationByItineraryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationByItineraryIdAsyncWithHttpInfo($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id = null, $test = null, $token = null, $email = null, $include = null, string $contentType = self::contentTypes['getReservationByItineraryId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Itinerary';
        $request = $this->getReservationByItineraryIdRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id, $test, $token, $email, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReservationByItineraryId'
     *
     * @param  string $accept Specifies the response format that the client would like to receive back. This must be &#x60;application/json&#x60;. (required)
     * @param  string $accept_encoding Specifies the response encoding that the client would like to receive back. This must be &#x60;gzip&#x60;. (required)
     * @param  string $customer_ip IP address of the customer, as captured by your integration.&lt;br&gt; Ensure your integration passes the customer&#39;s IP, not your own. This value helps determine their location and assign the correct payment gateway.&lt;br&gt; Also used for fraud recovery and other important analytics. (required)
     * @param  string $user_agent The &#x60;User-Agent&#x60; header string from the customer&#39;s request, as captured by your integration. If you are building an application then the &#x60;User-Agent&#x60; value should be &#x60;{app name}/{app version}&#x60;. (required)
     * @param  string $itinerary_id This parameter is used only to prefix the token value - no ID value is used.&lt;br&gt; (required)
     * @param  string $customer_session_id Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user&#39;s session, using a new value for every new customer session.&lt;br&gt; Including this value greatly eases EPS&#39;s internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user&#39;s session. (optional)
     * @param  string $test The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * &#x60;standard&#x60; - Requires valid test booking. * &#x60;service_unavailable&#x60; * &#x60;internal_server_error&#x60; (optional)
     * @param  string $token Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. (optional)
     * @param  string $email Email associated with the booking. Special characters in the local part or domain should be encoded. (Email is required if the token is not provided the request) &lt;br&gt; (optional)
     * @param  string[] $include Options for which information to return in the response. The value must be lower case.   * history - Include itinerary history, showing details of the changes made to this itinerary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationByItineraryId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReservationByItineraryIdRequest($accept, $accept_encoding, $customer_ip, $user_agent, $itinerary_id, $customer_session_id = null, $test = null, $token = null, $email = null, $include = null, string $contentType = self::contentTypes['getReservationByItineraryId'][0])
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getReservationByItineraryId'
            );
        }

        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null || (is_array($accept_encoding) && count($accept_encoding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_encoding when calling getReservationByItineraryId'
            );
        }

        // verify the required parameter 'customer_ip' is set
        if ($customer_ip === null || (is_array($customer_ip) && count($customer_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_ip when calling getReservationByItineraryId'
            );
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null || (is_array($user_agent) && count($user_agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_agent when calling getReservationByItineraryId'
            );
        }

        // verify the required parameter 'itinerary_id' is set
        if ($itinerary_id === null || (is_array($itinerary_id) && count($itinerary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itinerary_id when calling getReservationByItineraryId'
            );
        }







        $resourcePath = '/itineraries/{itinerary_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($accept_encoding);
        }
        // header params
        if ($customer_ip !== null) {
            $headerParams['Customer-Ip'] = ObjectSerializer::toHeaderValue($customer_ip);
        }
        // header params
        if ($customer_session_id !== null) {
            $headerParams['Customer-Session-Id'] = ObjectSerializer::toHeaderValue($customer_session_id);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['User-Agent'] = ObjectSerializer::toHeaderValue($user_agent);
        }
        // header params
        if ($test !== null) {
            $headerParams['Test'] = ObjectSerializer::toHeaderValue($test);
        }

        // path params
        if ($itinerary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itinerary_id' . '}',
                ObjectSerializer::toPathValue($itinerary_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

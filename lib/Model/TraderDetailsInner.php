<?php
/**
 * TraderDetailsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TraderDetailsInner Class Doc Comment
 *
 * @category Class
 * @description Information of the professional entity that sells the property inventory or related services.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TraderDetailsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TraderDetails_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'address' => '\OpenAPI\Client\Model\TraderAddress',
        'business_register_name' => 'string',
        'business_register_number' => 'string',
        'self_certification' => 'bool',
        'contact_message' => 'string',
        'right_to_withdraw_message' => 'string',
        'email' => 'string',
        'phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'address' => null,
        'business_register_name' => null,
        'business_register_number' => null,
        'self_certification' => null,
        'contact_message' => null,
        'right_to_withdraw_message' => null,
        'email' => null,
        'phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'address' => false,
		'business_register_name' => false,
		'business_register_number' => false,
		'self_certification' => false,
		'contact_message' => false,
		'right_to_withdraw_message' => false,
		'email' => false,
		'phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'address' => 'address',
        'business_register_name' => 'business_register_name',
        'business_register_number' => 'business_register_number',
        'self_certification' => 'self_certification',
        'contact_message' => 'contact_message',
        'right_to_withdraw_message' => 'right_to_withdraw_message',
        'email' => 'email',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'address' => 'setAddress',
        'business_register_name' => 'setBusinessRegisterName',
        'business_register_number' => 'setBusinessRegisterNumber',
        'self_certification' => 'setSelfCertification',
        'contact_message' => 'setContactMessage',
        'right_to_withdraw_message' => 'setRightToWithdrawMessage',
        'email' => 'setEmail',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'address' => 'getAddress',
        'business_register_name' => 'getBusinessRegisterName',
        'business_register_number' => 'getBusinessRegisterNumber',
        'self_certification' => 'getSelfCertification',
        'contact_message' => 'getContactMessage',
        'right_to_withdraw_message' => 'getRightToWithdrawMessage',
        'email' => 'getEmail',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('business_register_name', $data ?? [], null);
        $this->setIfExists('business_register_number', $data ?? [], null);
        $this->setIfExists('self_certification', $data ?? [], null);
        $this->setIfExists('contact_message', $data ?? [], null);
        $this->setIfExists('right_to_withdraw_message', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact_message'] === null) {
            $invalidProperties[] = "'contact_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The trader name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\TraderAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\TraderAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets business_register_name
     *
     * @return string|null
     */
    public function getBusinessRegisterName()
    {
        return $this->container['business_register_name'];
    }

    /**
     * Sets business_register_name
     *
     * @param string|null $business_register_name Name of the register where the trader is registered, and is related to the `business_register_number`<br> <i><b>NOTE:</b> See our [Digital Services Act](https://developers.expediagroup.com/docs/rapid/resources/reference/digital-services-act) information on Developer Hub.</i>
     *
     * @return self
     */
    public function setBusinessRegisterName($business_register_name)
    {
        if (is_null($business_register_name)) {
            throw new \InvalidArgumentException('non-nullable business_register_name cannot be null');
        }
        $this->container['business_register_name'] = $business_register_name;

        return $this;
    }

    /**
     * Gets business_register_number
     *
     * @return string|null
     */
    public function getBusinessRegisterNumber()
    {
        return $this->container['business_register_number'];
    }

    /**
     * Sets business_register_number
     *
     * @param string|null $business_register_number Business registration number<br> <i><b>NOTE:</b> See our [Digital Services Act](https://developers.expediagroup.com/docs/rapid/resources/reference/digital-services-act) information on Developer Hub.</i>
     *
     * @return self
     */
    public function setBusinessRegisterNumber($business_register_number)
    {
        if (is_null($business_register_number)) {
            throw new \InvalidArgumentException('non-nullable business_register_number cannot be null');
        }
        $this->container['business_register_number'] = $business_register_number;

        return $this;
    }

    /**
     * Gets self_certification
     *
     * @return bool|null
     */
    public function getSelfCertification()
    {
        return $this->container['self_certification'];
    }

    /**
     * Sets self_certification
     *
     * @param bool|null $self_certification Certification that the trader has confirmed their commitment to only offer products or services that comply with the applicable rules of Union law.<br> <i><b>NOTE:</b> See our [Digital Services Act](https://developers.expediagroup.com/docs/rapid/resources/reference/digital-services-act) information on Developer Hub.</i>
     *
     * @return self
     */
    public function setSelfCertification($self_certification)
    {
        if (is_null($self_certification)) {
            throw new \InvalidArgumentException('non-nullable self_certification cannot be null');
        }
        $this->container['self_certification'] = $self_certification;

        return $this;
    }

    /**
     * Gets contact_message
     *
     * @return string
     */
    public function getContactMessage()
    {
        return $this->container['contact_message'];
    }

    /**
     * Sets contact_message
     *
     * @param string $contact_message The trader contact message.
     *
     * @return self
     */
    public function setContactMessage($contact_message)
    {
        if (is_null($contact_message)) {
            throw new \InvalidArgumentException('non-nullable contact_message cannot be null');
        }
        $this->container['contact_message'] = $contact_message;

        return $this;
    }

    /**
     * Gets right_to_withdraw_message
     *
     * @return string|null
     */
    public function getRightToWithdrawMessage()
    {
        return $this->container['right_to_withdraw_message'];
    }

    /**
     * Sets right_to_withdraw_message
     *
     * @param string|null $right_to_withdraw_message The trader right to withdraw message.
     *
     * @return self
     */
    public function setRightToWithdrawMessage($right_to_withdraw_message)
    {
        if (is_null($right_to_withdraw_message)) {
            throw new \InvalidArgumentException('non-nullable right_to_withdraw_message cannot be null');
        }
        $this->container['right_to_withdraw_message'] = $right_to_withdraw_message;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The trader email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The trader phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Region
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Region Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Region implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Region';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'name' => 'string',
        'name_full' => 'string',
        'descriptor' => 'string',
        'iata_airport_code' => 'string',
        'iata_airport_metro_code' => 'string',
        'country_code' => 'string',
        'country_subdivision_code' => 'string',
        'coordinates' => '\OpenAPI\Client\Model\CoordinatesRegion',
        'associations' => 'array<string,string[]>',
        'ancestors' => '\OpenAPI\Client\Model\Ancestors[]',
        'descendants' => 'array<string,string[]>',
        'property_ids' => 'string[]',
        'property_ids_expanded' => 'string[]',
        'categories' => 'string[]',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'name' => null,
        'name_full' => null,
        'descriptor' => null,
        'iata_airport_code' => null,
        'iata_airport_metro_code' => null,
        'country_code' => null,
        'country_subdivision_code' => null,
        'coordinates' => null,
        'associations' => null,
        'ancestors' => null,
        'descendants' => null,
        'property_ids' => null,
        'property_ids_expanded' => null,
        'categories' => null,
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type' => false,
		'name' => false,
		'name_full' => false,
		'descriptor' => false,
		'iata_airport_code' => false,
		'iata_airport_metro_code' => false,
		'country_code' => false,
		'country_subdivision_code' => false,
		'coordinates' => false,
		'associations' => false,
		'ancestors' => false,
		'descendants' => false,
		'property_ids' => false,
		'property_ids_expanded' => false,
		'categories' => false,
		'tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'name_full' => 'name_full',
        'descriptor' => 'descriptor',
        'iata_airport_code' => 'iata_airport_code',
        'iata_airport_metro_code' => 'iata_airport_metro_code',
        'country_code' => 'country_code',
        'country_subdivision_code' => 'country_subdivision_code',
        'coordinates' => 'coordinates',
        'associations' => 'associations',
        'ancestors' => 'ancestors',
        'descendants' => 'descendants',
        'property_ids' => 'property_ids',
        'property_ids_expanded' => 'property_ids_expanded',
        'categories' => 'categories',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'name_full' => 'setNameFull',
        'descriptor' => 'setDescriptor',
        'iata_airport_code' => 'setIataAirportCode',
        'iata_airport_metro_code' => 'setIataAirportMetroCode',
        'country_code' => 'setCountryCode',
        'country_subdivision_code' => 'setCountrySubdivisionCode',
        'coordinates' => 'setCoordinates',
        'associations' => 'setAssociations',
        'ancestors' => 'setAncestors',
        'descendants' => 'setDescendants',
        'property_ids' => 'setPropertyIds',
        'property_ids_expanded' => 'setPropertyIdsExpanded',
        'categories' => 'setCategories',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'name_full' => 'getNameFull',
        'descriptor' => 'getDescriptor',
        'iata_airport_code' => 'getIataAirportCode',
        'iata_airport_metro_code' => 'getIataAirportMetroCode',
        'country_code' => 'getCountryCode',
        'country_subdivision_code' => 'getCountrySubdivisionCode',
        'coordinates' => 'getCoordinates',
        'associations' => 'getAssociations',
        'ancestors' => 'getAncestors',
        'descendants' => 'getDescendants',
        'property_ids' => 'getPropertyIds',
        'property_ids_expanded' => 'getPropertyIdsExpanded',
        'categories' => 'getCategories',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_full', $data ?? [], null);
        $this->setIfExists('descriptor', $data ?? [], null);
        $this->setIfExists('iata_airport_code', $data ?? [], null);
        $this->setIfExists('iata_airport_metro_code', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('country_subdivision_code', $data ?? [], null);
        $this->setIfExists('coordinates', $data ?? [], null);
        $this->setIfExists('associations', $data ?? [], null);
        $this->setIfExists('ancestors', $data ?? [], null);
        $this->setIfExists('descendants', $data ?? [], null);
        $this->setIfExists('property_ids', $data ?? [], null);
        $this->setIfExists('property_ids_expanded', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Region Id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Region type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Region name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_full
     *
     * @return string|null
     */
    public function getNameFull()
    {
        return $this->container['name_full'];
    }

    /**
     * Sets name_full
     *
     * @param string|null $name_full Full region name.
     *
     * @return self
     */
    public function setNameFull($name_full)
    {
        if (is_null($name_full)) {
            throw new \InvalidArgumentException('non-nullable name_full cannot be null');
        }
        $this->container['name_full'] = $name_full;

        return $this;
    }

    /**
     * Gets descriptor
     *
     * @return string|null
     */
    public function getDescriptor()
    {
        return $this->container['descriptor'];
    }

    /**
     * Sets descriptor
     *
     * @param string|null $descriptor Specific information about the region e.g. whether it covers surrounding areas for a city. Only present when relevant for a region. See our [region descriptors reference](https://developers.expediagroup.com/docs/rapid/lodging/geography/geography-reference-lists) for current known descriptor values.
     *
     * @return self
     */
    public function setDescriptor($descriptor)
    {
        if (is_null($descriptor)) {
            throw new \InvalidArgumentException('non-nullable descriptor cannot be null');
        }
        $this->container['descriptor'] = $descriptor;

        return $this;
    }

    /**
     * Gets iata_airport_code
     *
     * @return string|null
     */
    public function getIataAirportCode()
    {
        return $this->container['iata_airport_code'];
    }

    /**
     * Sets iata_airport_code
     *
     * @param string|null $iata_airport_code 3-character IATA airport code.
     *
     * @return self
     */
    public function setIataAirportCode($iata_airport_code)
    {
        if (is_null($iata_airport_code)) {
            throw new \InvalidArgumentException('non-nullable iata_airport_code cannot be null');
        }
        $this->container['iata_airport_code'] = $iata_airport_code;

        return $this;
    }

    /**
     * Gets iata_airport_metro_code
     *
     * @return string|null
     */
    public function getIataAirportMetroCode()
    {
        return $this->container['iata_airport_metro_code'];
    }

    /**
     * Sets iata_airport_metro_code
     *
     * @param string|null $iata_airport_metro_code 3-character IATA airport metropolitan code of the metropolitan airport area.
     *
     * @return self
     */
    public function setIataAirportMetroCode($iata_airport_metro_code)
    {
        if (is_null($iata_airport_metro_code)) {
            throw new \InvalidArgumentException('non-nullable iata_airport_metro_code cannot be null');
        }
        $this->container['iata_airport_metro_code'] = $iata_airport_metro_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Region country code (ISO 3166-1 alpha-2).
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_subdivision_code
     *
     * @return string|null
     */
    public function getCountrySubdivisionCode()
    {
        return $this->container['country_subdivision_code'];
    }

    /**
     * Sets country_subdivision_code
     *
     * @param string|null $country_subdivision_code Region country subdivision code (ISO 3166-2).
     *
     * @return self
     */
    public function setCountrySubdivisionCode($country_subdivision_code)
    {
        if (is_null($country_subdivision_code)) {
            throw new \InvalidArgumentException('non-nullable country_subdivision_code cannot be null');
        }
        $this->container['country_subdivision_code'] = $country_subdivision_code;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \OpenAPI\Client\Model\CoordinatesRegion|null
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \OpenAPI\Client\Model\CoordinatesRegion|null $coordinates coordinates
     *
     * @return self
     */
    public function setCoordinates($coordinates)
    {
        if (is_null($coordinates)) {
            throw new \InvalidArgumentException('non-nullable coordinates cannot be null');
        }
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets associations
     *
     * @return array<string,string[]>|null
     */
    public function getAssociations()
    {
        return $this->container['associations'];
    }

    /**
     * Sets associations
     *
     * @param array<string,string[]>|null $associations A map of region types to a sorted array of region ids with a touristic association to the region.
     *
     * @return self
     */
    public function setAssociations($associations)
    {
        if (is_null($associations)) {
            throw new \InvalidArgumentException('non-nullable associations cannot be null');
        }
        $this->container['associations'] = $associations;

        return $this;
    }

    /**
     * Gets ancestors
     *
     * @return \OpenAPI\Client\Model\Ancestors[]|null
     */
    public function getAncestors()
    {
        return $this->container['ancestors'];
    }

    /**
     * Sets ancestors
     *
     * @param \OpenAPI\Client\Model\Ancestors[]|null $ancestors An array of the region's ancestors.
     *
     * @return self
     */
    public function setAncestors($ancestors)
    {
        if (is_null($ancestors)) {
            throw new \InvalidArgumentException('non-nullable ancestors cannot be null');
        }
        $this->container['ancestors'] = $ancestors;

        return $this;
    }

    /**
     * Gets descendants
     *
     * @return array<string,string[]>|null
     */
    public function getDescendants()
    {
        return $this->container['descendants'];
    }

    /**
     * Sets descendants
     *
     * @param array<string,string[]>|null $descendants A map of region types to an array of region ids. The region ids are direct descendants of the region.
     *
     * @return self
     */
    public function setDescendants($descendants)
    {
        if (is_null($descendants)) {
            throw new \InvalidArgumentException('non-nullable descendants cannot be null');
        }
        $this->container['descendants'] = $descendants;

        return $this;
    }

    /**
     * Gets property_ids
     *
     * @return string[]|null
     */
    public function getPropertyIds()
    {
        return $this->container['property_ids'];
    }

    /**
     * Sets property_ids
     *
     * @param string[]|null $property_ids An array of associated property ids for the region.
     *
     * @return self
     */
    public function setPropertyIds($property_ids)
    {
        if (is_null($property_ids)) {
            throw new \InvalidArgumentException('non-nullable property_ids cannot be null');
        }
        $this->container['property_ids'] = $property_ids;

        return $this;
    }

    /**
     * Gets property_ids_expanded
     *
     * @return string[]|null
     */
    public function getPropertyIdsExpanded()
    {
        return $this->container['property_ids_expanded'];
    }

    /**
     * Sets property_ids_expanded
     *
     * @param string[]|null $property_ids_expanded An array of associated property ids within an expanded radius for the region.
     *
     * @return self
     */
    public function setPropertyIdsExpanded($property_ids_expanded)
    {
        if (is_null($property_ids_expanded)) {
            throw new \InvalidArgumentException('non-nullable property_ids_expanded cannot be null');
        }
        $this->container['property_ids_expanded'] = $property_ids_expanded;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories A list of regional categories.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of regional tags.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



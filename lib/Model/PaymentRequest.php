<?php
/**
 * PaymentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rapid
 *
 * EPS Rapid V3
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'number' => 'string',
        'security_code' => 'string',
        'expiration_month' => 'string',
        'expiration_year' => 'string',
        'billing_contact' => '\OpenAPI\Client\Model\BillingContactRequest',
        'third_party_authentication' => '\OpenAPI\Client\Model\ThirdPartyAuthRequest',
        'enrollment_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'number' => null,
        'security_code' => null,
        'expiration_month' => null,
        'expiration_year' => null,
        'billing_contact' => null,
        'third_party_authentication' => null,
        'enrollment_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'number' => false,
		'security_code' => false,
		'expiration_month' => false,
		'expiration_year' => false,
		'billing_contact' => false,
		'third_party_authentication' => false,
		'enrollment_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'number' => 'number',
        'security_code' => 'security_code',
        'expiration_month' => 'expiration_month',
        'expiration_year' => 'expiration_year',
        'billing_contact' => 'billing_contact',
        'third_party_authentication' => 'third_party_authentication',
        'enrollment_date' => 'enrollment_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'number' => 'setNumber',
        'security_code' => 'setSecurityCode',
        'expiration_month' => 'setExpirationMonth',
        'expiration_year' => 'setExpirationYear',
        'billing_contact' => 'setBillingContact',
        'third_party_authentication' => 'setThirdPartyAuthentication',
        'enrollment_date' => 'setEnrollmentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'number' => 'getNumber',
        'security_code' => 'getSecurityCode',
        'expiration_month' => 'getExpirationMonth',
        'expiration_year' => 'getExpirationYear',
        'billing_contact' => 'getBillingContact',
        'third_party_authentication' => 'getThirdPartyAuthentication',
        'enrollment_date' => 'getEnrollmentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CORPORATE_CARD = 'corporate_card';
    public const TYPE_CUSTOMER_CARD = 'customer_card';
    public const TYPE_VIRTUAL_CARD = 'virtual_card';
    public const TYPE_AFFILIATE_COLLECT = 'affiliate_collect';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CORPORATE_CARD,
            self::TYPE_CUSTOMER_CARD,
            self::TYPE_VIRTUAL_CARD,
            self::TYPE_AFFILIATE_COLLECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('security_code', $data ?? [], null);
        $this->setIfExists('expiration_month', $data ?? [], null);
        $this->setIfExists('expiration_year', $data ?? [], null);
        $this->setIfExists('billing_contact', $data ?? [], null);
        $this->setIfExists('third_party_authentication', $data ?? [], null);
        $this->setIfExists('enrollment_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['billing_contact'] === null) {
            $invalidProperties[] = "'billing_contact' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Identifier for the type of payment. If affiliate_collect, card information is not required as EPS will not be processing the payment. However, billing contact information is still required.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Card number. Required for credit card transactions.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets security_code
     *
     * @return string|null
     */
    public function getSecurityCode()
    {
        return $this->container['security_code'];
    }

    /**
     * Sets security_code
     *
     * @param string|null $security_code CVV/CSV code from the back of the customer's card. Required for credit card transactions.
     *
     * @return self
     */
    public function setSecurityCode($security_code)
    {
        if (is_null($security_code)) {
            throw new \InvalidArgumentException('non-nullable security_code cannot be null');
        }
        $this->container['security_code'] = $security_code;

        return $this;
    }

    /**
     * Gets expiration_month
     *
     * @return string|null
     */
    public function getExpirationMonth()
    {
        return $this->container['expiration_month'];
    }

    /**
     * Sets expiration_month
     *
     * @param string|null $expiration_month Two-digit month the credit card will expire. Required for credit card transactions.
     *
     * @return self
     */
    public function setExpirationMonth($expiration_month)
    {
        if (is_null($expiration_month)) {
            throw new \InvalidArgumentException('non-nullable expiration_month cannot be null');
        }
        $this->container['expiration_month'] = $expiration_month;

        return $this;
    }

    /**
     * Gets expiration_year
     *
     * @return string|null
     */
    public function getExpirationYear()
    {
        return $this->container['expiration_year'];
    }

    /**
     * Sets expiration_year
     *
     * @param string|null $expiration_year Year the credit card will expire. Required for credit card transactions.
     *
     * @return self
     */
    public function setExpirationYear($expiration_year)
    {
        if (is_null($expiration_year)) {
            throw new \InvalidArgumentException('non-nullable expiration_year cannot be null');
        }
        $this->container['expiration_year'] = $expiration_year;

        return $this;
    }

    /**
     * Gets billing_contact
     *
     * @return \OpenAPI\Client\Model\BillingContactRequest
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     *
     * @param \OpenAPI\Client\Model\BillingContactRequest $billing_contact billing_contact
     *
     * @return self
     */
    public function setBillingContact($billing_contact)
    {
        if (is_null($billing_contact)) {
            throw new \InvalidArgumentException('non-nullable billing_contact cannot be null');
        }
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets third_party_authentication
     *
     * @return \OpenAPI\Client\Model\ThirdPartyAuthRequest|null
     */
    public function getThirdPartyAuthentication()
    {
        return $this->container['third_party_authentication'];
    }

    /**
     * Sets third_party_authentication
     *
     * @param \OpenAPI\Client\Model\ThirdPartyAuthRequest|null $third_party_authentication third_party_authentication
     *
     * @return self
     */
    public function setThirdPartyAuthentication($third_party_authentication)
    {
        if (is_null($third_party_authentication)) {
            throw new \InvalidArgumentException('non-nullable third_party_authentication cannot be null');
        }
        $this->container['third_party_authentication'] = $third_party_authentication;

        return $this;
    }

    /**
     * Gets enrollment_date
     *
     * @return string|null
     */
    public function getEnrollmentDate()
    {
        return $this->container['enrollment_date'];
    }

    /**
     * Sets enrollment_date
     *
     * @param string|null $enrollment_date Date the payment account was enrolled in the cardholder's account with the merchant, in ISO 8601 format (YYYY-MM-DD).
     *
     * @return self
     */
    public function setEnrollmentDate($enrollment_date)
    {
        if (is_null($enrollment_date)) {
            throw new \InvalidArgumentException('non-nullable enrollment_date cannot be null');
        }
        $this->container['enrollment_date'] = $enrollment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


